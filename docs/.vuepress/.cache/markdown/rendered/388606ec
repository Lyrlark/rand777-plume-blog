{"content":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>原型与原型链是什么？</p>\n</div>\n<hr>\n<p>在 JavaScript 中，<strong>原型（Prototype）</strong> 和 <strong>原型链（Prototype Chain）</strong> 是实现继承的核心机制。理解它们对于掌握 JavaScript 的面向对象编程至关重要。</p>\n<h3 id=\"_1-原型-prototype\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-原型-prototype\"><span>1. 原型（Prototype）</span></a></h3>\n<p>每个 JavaScript 对象（除了 <code v-pre>null</code>）都有一个内部属性 <code v-pre>[[Prototype]]</code>，指向它的原型对象。原型对象也是一个普通对象，它包含可以被其他对象共享的属性和方法。</p>\n<ul>\n<li>在 ES5 中，可以通过 <code v-pre>Object.getPrototypeOf(obj)</code> 获取对象的原型。</li>\n<li>在 ES6 中，可以通过 <code v-pre>obj.__proto__</code> 直接访问对象的原型（不推荐在生产环境中使用）。</li>\n</ul>\n<h4 id=\"示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">  name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, my name is </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">name</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // student 的原型是 person</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Bob</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Hello, my name is Bob</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在上面的例子中，<code v-pre>student</code> 对象继承了 <code v-pre>person</code> 对象的 <code v-pre>greet</code> 方法。</p>\n<hr>\n<h3 id=\"_2-原型链-prototype-chain\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-原型链-prototype-chain\"><span>2. 原型链（Prototype Chain）</span></a></h3>\n<p>当访问一个对象的属性或方法时，JavaScript 引擎会按照以下顺序查找：</p>\n<ol>\n<li>对象本身是否有该属性或方法。</li>\n<li>如果没有，则查找对象的原型（<code v-pre>[[Prototype]]</code>）。</li>\n<li>如果原型上也没有，则继续查找原型的原型，直到找到或到达原型链的顶端（<code v-pre>null</code>）。</li>\n</ol>\n<p>这种链式查找的机制就是 <strong>原型链</strong>。</p>\n<h4 id=\"示例-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-1\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> animal</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">  type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Animal</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  describe</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I am a </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">type</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">animal</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Dog</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Puppy</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">describe</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: I am a Puppy</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>查找过程：</p>\n<ol>\n<li><code v-pre>puppy</code> 本身没有 <code v-pre>describe</code> 方法。</li>\n<li>查找 <code v-pre>puppy</code> 的原型 <code v-pre>dog</code>，<code v-pre>dog</code> 也没有 <code v-pre>describe</code> 方法。</li>\n<li>继续查找 <code v-pre>dog</code> 的原型 <code v-pre>animal</code>，<code v-pre>animal</code> 有 <code v-pre>describe</code> 方法，调用它。</li>\n</ol>\n<hr>\n<h3 id=\"_3-构造函数与原型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-构造函数与原型\"><span>3. 构造函数与原型</span></a></h3>\n<p>在 JavaScript 中，函数也是对象，每个函数都有一个 <code v-pre>prototype</code> 属性（注意：不是 <code v-pre>[[Prototype]]</code>）。当使用 <code v-pre>new</code> 关键字调用构造函数时，创建的对象会将其 <code v-pre>[[Prototype]]</code> 指向构造函数的 <code v-pre>prototype</code> 属性。</p>\n<h4 id=\"示例-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-2\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">  this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">prototype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, my name is </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">name</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> alice</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">alice</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Hello, my name is Alice</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code v-pre>Person.prototype</code> 是 <code v-pre>alice</code> 对象的原型。</li>\n<li><code v-pre>alice.__proto__ === Person.prototype</code> 为 <code v-pre>true</code>。</li>\n</ul>\n<hr>\n<h3 id=\"_4-原型链的顶端\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-原型链的顶端\"><span>4. 原型链的顶端</span></a></h3>\n<p>所有对象的原型链最终都会指向 <code v-pre>Object.prototype</code>，而 <code v-pre>Object.prototype</code> 的原型是 <code v-pre>null</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">prototype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">__proto__</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: null</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><hr>\n<h3 id=\"_5-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-总结\"><span>5. 总结</span></a></h3>\n<ul>\n<li><strong>原型</strong>：每个对象都有一个原型对象，用于共享属性和方法。</li>\n<li><strong>原型链</strong>：通过原型链，对象可以访问其原型链上的属性和方法。</li>\n<li><strong>构造函数</strong>：通过构造函数的 <code v-pre>prototype</code> 属性，可以为实例对象提供共享的属性和方法。</li>\n<li><strong>继承</strong>：原型链是实现 JavaScript 继承的基础。</li>\n</ul>\n","env":{"base":"/","filePath":"G:/200-Project/hoey-blog-plume/docs/notes/interview/JavaScript/3.原型与原型链.md","filePathRelative":"notes/interview/JavaScript/3.原型与原型链.md","frontmatter":{"title":"原型与原型链","createTime":"2025/02/03 21:10:34","permalink":"/interview/ndncesqk/"},"sfcBlocks":{"template":{"type":"template","content":"<template><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>原型与原型链是什么？</p>\n</div>\n<hr>\n<p>在 JavaScript 中，<strong>原型（Prototype）</strong> 和 <strong>原型链（Prototype Chain）</strong> 是实现继承的核心机制。理解它们对于掌握 JavaScript 的面向对象编程至关重要。</p>\n<h3 id=\"_1-原型-prototype\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-原型-prototype\"><span>1. 原型（Prototype）</span></a></h3>\n<p>每个 JavaScript 对象（除了 <code v-pre>null</code>）都有一个内部属性 <code v-pre>[[Prototype]]</code>，指向它的原型对象。原型对象也是一个普通对象，它包含可以被其他对象共享的属性和方法。</p>\n<ul>\n<li>在 ES5 中，可以通过 <code v-pre>Object.getPrototypeOf(obj)</code> 获取对象的原型。</li>\n<li>在 ES6 中，可以通过 <code v-pre>obj.__proto__</code> 直接访问对象的原型（不推荐在生产环境中使用）。</li>\n</ul>\n<h4 id=\"示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">  name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, my name is </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">name</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // student 的原型是 person</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Bob</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Hello, my name is Bob</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在上面的例子中，<code v-pre>student</code> 对象继承了 <code v-pre>person</code> 对象的 <code v-pre>greet</code> 方法。</p>\n<hr>\n<h3 id=\"_2-原型链-prototype-chain\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-原型链-prototype-chain\"><span>2. 原型链（Prototype Chain）</span></a></h3>\n<p>当访问一个对象的属性或方法时，JavaScript 引擎会按照以下顺序查找：</p>\n<ol>\n<li>对象本身是否有该属性或方法。</li>\n<li>如果没有，则查找对象的原型（<code v-pre>[[Prototype]]</code>）。</li>\n<li>如果原型上也没有，则继续查找原型的原型，直到找到或到达原型链的顶端（<code v-pre>null</code>）。</li>\n</ol>\n<p>这种链式查找的机制就是 <strong>原型链</strong>。</p>\n<h4 id=\"示例-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-1\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> animal</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">  type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Animal</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  describe</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I am a </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">type</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">animal</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Dog</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Puppy</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">describe</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: I am a Puppy</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>查找过程：</p>\n<ol>\n<li><code v-pre>puppy</code> 本身没有 <code v-pre>describe</code> 方法。</li>\n<li>查找 <code v-pre>puppy</code> 的原型 <code v-pre>dog</code>，<code v-pre>dog</code> 也没有 <code v-pre>describe</code> 方法。</li>\n<li>继续查找 <code v-pre>dog</code> 的原型 <code v-pre>animal</code>，<code v-pre>animal</code> 有 <code v-pre>describe</code> 方法，调用它。</li>\n</ol>\n<hr>\n<h3 id=\"_3-构造函数与原型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-构造函数与原型\"><span>3. 构造函数与原型</span></a></h3>\n<p>在 JavaScript 中，函数也是对象，每个函数都有一个 <code v-pre>prototype</code> 属性（注意：不是 <code v-pre>[[Prototype]]</code>）。当使用 <code v-pre>new</code> 关键字调用构造函数时，创建的对象会将其 <code v-pre>[[Prototype]]</code> 指向构造函数的 <code v-pre>prototype</code> 属性。</p>\n<h4 id=\"示例-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-2\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">  this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">prototype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, my name is </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">name</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> alice</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">alice</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Hello, my name is Alice</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code v-pre>Person.prototype</code> 是 <code v-pre>alice</code> 对象的原型。</li>\n<li><code v-pre>alice.__proto__ === Person.prototype</code> 为 <code v-pre>true</code>。</li>\n</ul>\n<hr>\n<h3 id=\"_4-原型链的顶端\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-原型链的顶端\"><span>4. 原型链的顶端</span></a></h3>\n<p>所有对象的原型链最终都会指向 <code v-pre>Object.prototype</code>，而 <code v-pre>Object.prototype</code> 的原型是 <code v-pre>null</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">prototype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">__proto__</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: null</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><hr>\n<h3 id=\"_5-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-总结\"><span>5. 总结</span></a></h3>\n<ul>\n<li><strong>原型</strong>：每个对象都有一个原型对象，用于共享属性和方法。</li>\n<li><strong>原型链</strong>：通过原型链，对象可以访问其原型链上的属性和方法。</li>\n<li><strong>构造函数</strong>：通过构造函数的 <code v-pre>prototype</code> 属性，可以为实例对象提供共享的属性和方法。</li>\n<li><strong>继承</strong>：原型链是实现 JavaScript 继承的基础。</li>\n</ul>\n</template>","contentStripped":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>原型与原型链是什么？</p>\n</div>\n<hr>\n<p>在 JavaScript 中，<strong>原型（Prototype）</strong> 和 <strong>原型链（Prototype Chain）</strong> 是实现继承的核心机制。理解它们对于掌握 JavaScript 的面向对象编程至关重要。</p>\n<h3 id=\"_1-原型-prototype\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-原型-prototype\"><span>1. 原型（Prototype）</span></a></h3>\n<p>每个 JavaScript 对象（除了 <code v-pre>null</code>）都有一个内部属性 <code v-pre>[[Prototype]]</code>，指向它的原型对象。原型对象也是一个普通对象，它包含可以被其他对象共享的属性和方法。</p>\n<ul>\n<li>在 ES5 中，可以通过 <code v-pre>Object.getPrototypeOf(obj)</code> 获取对象的原型。</li>\n<li>在 ES6 中，可以通过 <code v-pre>obj.__proto__</code> 直接访问对象的原型（不推荐在生产环境中使用）。</li>\n</ul>\n<h4 id=\"示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">  name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, my name is </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">name</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // student 的原型是 person</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Bob</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">student</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Hello, my name is Bob</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在上面的例子中，<code v-pre>student</code> 对象继承了 <code v-pre>person</code> 对象的 <code v-pre>greet</code> 方法。</p>\n<hr>\n<h3 id=\"_2-原型链-prototype-chain\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-原型链-prototype-chain\"><span>2. 原型链（Prototype Chain）</span></a></h3>\n<p>当访问一个对象的属性或方法时，JavaScript 引擎会按照以下顺序查找：</p>\n<ol>\n<li>对象本身是否有该属性或方法。</li>\n<li>如果没有，则查找对象的原型（<code v-pre>[[Prototype]]</code>）。</li>\n<li>如果原型上也没有，则继续查找原型的原型，直到找到或到达原型链的顶端（<code v-pre>null</code>）。</li>\n</ol>\n<p>这种链式查找的机制就是 <strong>原型链</strong>。</p>\n<h4 id=\"示例-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-1\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> animal</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">  type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Animal</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  describe</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I am a </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">type</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">animal</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Dog</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">create</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">dog</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Puppy</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">puppy</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">describe</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: I am a Puppy</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>查找过程：</p>\n<ol>\n<li><code v-pre>puppy</code> 本身没有 <code v-pre>describe</code> 方法。</li>\n<li>查找 <code v-pre>puppy</code> 的原型 <code v-pre>dog</code>，<code v-pre>dog</code> 也没有 <code v-pre>describe</code> 方法。</li>\n<li>继续查找 <code v-pre>dog</code> 的原型 <code v-pre>animal</code>，<code v-pre>animal</code> 有 <code v-pre>describe</code> 方法，调用它。</li>\n</ol>\n<hr>\n<h3 id=\"_3-构造函数与原型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-构造函数与原型\"><span>3. 构造函数与原型</span></a></h3>\n<p>在 JavaScript 中，函数也是对象，每个函数都有一个 <code v-pre>prototype</code> 属性（注意：不是 <code v-pre>[[Prototype]]</code>）。当使用 <code v-pre>new</code> 关键字调用构造函数时，创建的对象会将其 <code v-pre>[[Prototype]]</code> 指向构造函数的 <code v-pre>prototype</code> 属性。</p>\n<h4 id=\"示例-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-2\"><span>示例：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">  this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">prototype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, my name is </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">${</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">this</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">name</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">}</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">`</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> alice</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">alice</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Hello, my name is Alice</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code v-pre>Person.prototype</code> 是 <code v-pre>alice</code> 对象的原型。</li>\n<li><code v-pre>alice.__proto__ === Person.prototype</code> 为 <code v-pre>true</code>。</li>\n</ul>\n<hr>\n<h3 id=\"_4-原型链的顶端\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-原型链的顶端\"><span>4. 原型链的顶端</span></a></h3>\n<p>所有对象的原型链最终都会指向 <code v-pre>Object.prototype</code>，而 <code v-pre>Object.prototype</code> 的原型是 <code v-pre>null</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">Object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">prototype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">__proto__</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: null</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><hr>\n<h3 id=\"_5-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-总结\"><span>5. 总结</span></a></h3>\n<ul>\n<li><strong>原型</strong>：每个对象都有一个原型对象，用于共享属性和方法。</li>\n<li><strong>原型链</strong>：通过原型链，对象可以访问其原型链上的属性和方法。</li>\n<li><strong>构造函数</strong>：通过构造函数的 <code v-pre>prototype</code> 属性，可以为实例对象提供共享的属性和方法。</li>\n<li><strong>继承</strong>：原型链是实现 JavaScript 继承的基础。</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"::: tip 问题\n原型与原型链是什么？\n:::\n\n---\n\n在 JavaScript 中，**原型（Prototype）** 和 **原型链（Prototype Chain）** 是实现继承的核心机制。理解它们对于掌握 JavaScript 的面向对象编程至关重要。\n\n### 1. 原型（Prototype）\n每个 JavaScript 对象（除了 `null`）都有一个内部属性 `[[Prototype]]`，指向它的原型对象。原型对象也是一个普通对象，它包含可以被其他对象共享的属性和方法。\n\n- 在 ES5 中，可以通过 `Object.getPrototypeOf(obj)` 获取对象的原型。\n- 在 ES6 中，可以通过 `obj.__proto__` 直接访问对象的原型（不推荐在生产环境中使用）。\n\n#### 示例：\n```javascript\nconst person = {\n  name: \"Alice\",\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n};\n\nconst student = Object.create(person); // student 的原型是 person\nstudent.name = \"Bob\";\n\nstudent.greet(); // 输出: Hello, my name is Bob\n```\n\n在上面的例子中，`student` 对象继承了 `person` 对象的 `greet` 方法。\n\n---\n\n### 2. 原型链（Prototype Chain）\n当访问一个对象的属性或方法时，JavaScript 引擎会按照以下顺序查找：\n1. 对象本身是否有该属性或方法。\n2. 如果没有，则查找对象的原型（`[[Prototype]]`）。\n3. 如果原型上也没有，则继续查找原型的原型，直到找到或到达原型链的顶端（`null`）。\n\n这种链式查找的机制就是 **原型链**。\n\n#### 示例：\n```javascript\nconst animal = {\n  type: \"Animal\",\n  describe() {\n    console.log(`I am a ${this.type}`);\n  }\n};\n\nconst dog = Object.create(animal);\ndog.type = \"Dog\";\n\nconst puppy = Object.create(dog);\npuppy.type = \"Puppy\";\n\npuppy.describe(); // 输出: I am a Puppy\n```\n\n查找过程：\n1. `puppy` 本身没有 `describe` 方法。\n2. 查找 `puppy` 的原型 `dog`，`dog` 也没有 `describe` 方法。\n3. 继续查找 `dog` 的原型 `animal`，`animal` 有 `describe` 方法，调用它。\n\n---\n\n### 3. 构造函数与原型\n在 JavaScript 中，函数也是对象，每个函数都有一个 `prototype` 属性（注意：不是 `[[Prototype]]`）。当使用 `new` 关键字调用构造函数时，创建的对象会将其 `[[Prototype]]` 指向构造函数的 `prototype` 属性。\n\n#### 示例：\n```javascript\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function() {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst alice = new Person(\"Alice\");\nalice.greet(); // 输出: Hello, my name is Alice\n```\n\n- `Person.prototype` 是 `alice` 对象的原型。\n- `alice.__proto__ === Person.prototype` 为 `true`。\n\n---\n\n### 4. 原型链的顶端\n所有对象的原型链最终都会指向 `Object.prototype`，而 `Object.prototype` 的原型是 `null`。\n\n```javascript\nconsole.log(Object.prototype.__proto__); // 输出: null\n```\n\n---\n\n### 5. 总结\n- **原型**：每个对象都有一个原型对象，用于共享属性和方法。\n- **原型链**：通过原型链，对象可以访问其原型链上的属性和方法。\n- **构造函数**：通过构造函数的 `prototype` 属性，可以为实例对象提供共享的属性和方法。\n- **继承**：原型链是实现 JavaScript 继承的基础。","excerpt":"","includedFiles":[],"tasklists":0,"title":"","headers":[{"level":3,"title":"1. 原型（Prototype）","slug":"_1-原型-prototype","link":"#_1-原型-prototype","children":[]},{"level":3,"title":"2. 原型链（Prototype Chain）","slug":"_2-原型链-prototype-chain","link":"#_2-原型链-prototype-chain","children":[]},{"level":3,"title":"3. 构造函数与原型","slug":"_3-构造函数与原型","link":"#_3-构造函数与原型","children":[]},{"level":3,"title":"4. 原型链的顶端","slug":"_4-原型链的顶端","link":"#_4-原型链的顶端","children":[]},{"level":3,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]}]}}
