{"content":"<p>在使用 <code v-pre>Promise</code> 的时候，遇到一些误区，同时总结处理 <code v-pre>Promise</code> 结果的方法。<br>\n对与Promise 的结果处理，需要从 JavaScript 的事件循环和 Promise 状态机角度来理解。</p>\n<!-- more -->\n<h3 id=\"_1-const-p1-new-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-const-p1-new-promise\"><span>1. <code v-pre>const p1 = new Promise(...)</code></span></a></h3>\n<h4 id=\"正确用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正确用法\"><span>正确用法：</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">((</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> reject</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 异步操作</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">成功结果</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">),</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 通过 .then 获取结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">通过 .then 获取到结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出：\"成功结果\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span></code></pre>\n</div><h4 id=\"resolve-错误用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#resolve-错误用法\"><span>resolve 错误用法</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">((</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ❌ 错误！不能将自身作为 resolve 的值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 会导致循环引用，抛出 TypeError: Chaining cycle detected for promise</span></span></code></pre>\n</div><p><strong>原因</strong>：<br>\nPromise 的 <code v-pre>resolve</code> 参数必须是<strong>普通值</strong>或<strong>另一个 Promise</strong>。如果传入自身，会导致无限递归（类似 <code v-pre>const a = { self: a }</code>），JavaScript 会直接抛出错误。</p>\n<hr>\n<h3 id=\"_2-const-p1-await-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-const-p1-await-promise\"><span>2. <code v-pre>const p1 = await Promise</code></span></a></h3>\n<h4 id=\"正确场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正确场景\"><span>正确场景：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> demo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 假设有一个已解决的 Promise</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">结果值</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 使用 await 提取结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ✅ p1 直接是 \"结果值\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出：\"结果值\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">demo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4 id=\"关键点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#关键点\"><span>关键点：</span></a></h4>\n<ul>\n<li><code v-pre>await</code> 会<strong>自动提取 Promise 的结果值</strong>，无需手动调用 <code v-pre>.then</code>。</li>\n<li>如果 Promise 被拒绝（rejected），<code v-pre>await</code> 会抛出异常，需要用 <code v-pre>try/catch</code> 捕获。</li>\n</ul>\n<hr>\n<h3 id=\"_3-核心区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-核心区别\"><span>3. <strong>核心区别</strong></span></a></h3>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th><code v-pre>new Promise</code> + <code v-pre>.then</code></th>\n<th><code v-pre>await</code> 获取结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>类型</strong></td>\n<td><code v-pre>p1</code> 是 Promise 对象</td>\n<td><code v-pre>p1</code> 是 Promise 的结果值（非 Promise）</td>\n</tr>\n<tr>\n<td><strong>获取结果方式</strong></td>\n<td>必须通过 <code v-pre>.then</code> 或 <code v-pre>.catch</code> 处理</td>\n<td>直接赋值即可</td>\n</tr>\n<tr>\n<td><strong>错误处理</strong></td>\n<td>链式调用 <code v-pre>.catch</code></td>\n<td>用 <code v-pre>try/catch</code> 包裹</td>\n</tr>\n<tr>\n<td><strong>适用环境</strong></td>\n<td>所有 JavaScript 环境</td>\n<td>必须在 <code v-pre>async</code> 函数中使用</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"_4-常见误区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-常见误区\"><span>4. <strong>常见误区</strong></span></a></h3>\n<h4 id=\"误区-1-混淆-resolve-的参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#误区-1-混淆-resolve-的参数\"><span>误区 1：混淆 <code v-pre>resolve</code> 的参数</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 错误：试图 resolve 自身</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ❌ 循环引用</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 正确：resolve 一个值或另一个 Promise</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ✅ 正确</span></span></code></pre>\n</div><h4 id=\"误区-2-误以为-await-返回-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#误区-2-误以为-await-返回-promise\"><span>误区 2：误以为 <code v-pre>await</code> 返回 Promise</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">value</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 \"value\"，而不是 Promise 对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><hr>\n<h3 id=\"_5-实际应用示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-实际应用示例\"><span>5. <strong>实际应用示例</strong></span></a></h3>\n<h4 id=\"场景-1-用-then-处理结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#场景-1-用-then-处理结果\"><span>场景 1：用 <code v-pre>.then</code> 处理结果</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">),</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 通过 .then 处理</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span></code></pre>\n</div><h4 id=\"场景-2-用-await-直接获取结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#场景-2-用-await-直接获取结果\"><span>场景 2：用 <code v-pre>await</code> 直接获取结果</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 直接得到 \"数据\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n</div><hr>\n<h3 id=\"_6-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-总结\"><span>6. <strong>总结</strong></span></a></h3>\n<ul>\n<li><strong><code v-pre>new Promise</code></strong>：创建一个异步任务，通过 <code v-pre>.then</code>/<code v-pre>.catch</code> 处理结果。</li>\n<li><strong><code v-pre>await</code></strong>：在 <code v-pre>async</code> 函数中直接提取 Promise 的结果值，代码更简洁。</li>\n<li><strong>关键规则</strong>：\n<ul>\n<li><code v-pre>resolve</code> 必须传递普通值或另一个 Promise，不能引用自身。</li>\n<li><code v-pre>await</code> 只能在 <code v-pre>async</code> 函数中使用，否则会语法错误。</li>\n</ul>\n</li>\n</ul>\n","env":{"base":"/","filePath":"D:/zhy-git/hoey-blog-plume/docs/学文/24050801.md","filePathRelative":"学文/24050801.md","frontmatter":{"title":"关于 Promise 的结果处理","createTime":"2024/05/8 22:19:32","permalink":"/article/qlui3f11/","tags":["JavaScript"]},"sfcBlocks":{"template":{"type":"template","content":"<template><p>在使用 <code v-pre>Promise</code> 的时候，遇到一些误区，同时总结处理 <code v-pre>Promise</code> 结果的方法。<br>\n对与Promise 的结果处理，需要从 JavaScript 的事件循环和 Promise 状态机角度来理解。</p>\n<!-- more -->\n<h3 id=\"_1-const-p1-new-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-const-p1-new-promise\"><span>1. <code v-pre>const p1 = new Promise(...)</code></span></a></h3>\n<h4 id=\"正确用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正确用法\"><span>正确用法：</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">((</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> reject</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 异步操作</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">成功结果</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">),</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 通过 .then 获取结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">通过 .then 获取到结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出：\"成功结果\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span></code></pre>\n</div><h4 id=\"resolve-错误用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#resolve-错误用法\"><span>resolve 错误用法</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">((</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ❌ 错误！不能将自身作为 resolve 的值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 会导致循环引用，抛出 TypeError: Chaining cycle detected for promise</span></span></code></pre>\n</div><p><strong>原因</strong>：<br>\nPromise 的 <code v-pre>resolve</code> 参数必须是<strong>普通值</strong>或<strong>另一个 Promise</strong>。如果传入自身，会导致无限递归（类似 <code v-pre>const a = { self: a }</code>），JavaScript 会直接抛出错误。</p>\n<hr>\n<h3 id=\"_2-const-p1-await-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-const-p1-await-promise\"><span>2. <code v-pre>const p1 = await Promise</code></span></a></h3>\n<h4 id=\"正确场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正确场景\"><span>正确场景：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> demo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 假设有一个已解决的 Promise</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">结果值</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 使用 await 提取结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ✅ p1 直接是 \"结果值\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出：\"结果值\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">demo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4 id=\"关键点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#关键点\"><span>关键点：</span></a></h4>\n<ul>\n<li><code v-pre>await</code> 会<strong>自动提取 Promise 的结果值</strong>，无需手动调用 <code v-pre>.then</code>。</li>\n<li>如果 Promise 被拒绝（rejected），<code v-pre>await</code> 会抛出异常，需要用 <code v-pre>try/catch</code> 捕获。</li>\n</ul>\n<hr>\n<h3 id=\"_3-核心区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-核心区别\"><span>3. <strong>核心区别</strong></span></a></h3>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th><code v-pre>new Promise</code> + <code v-pre>.then</code></th>\n<th><code v-pre>await</code> 获取结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>类型</strong></td>\n<td><code v-pre>p1</code> 是 Promise 对象</td>\n<td><code v-pre>p1</code> 是 Promise 的结果值（非 Promise）</td>\n</tr>\n<tr>\n<td><strong>获取结果方式</strong></td>\n<td>必须通过 <code v-pre>.then</code> 或 <code v-pre>.catch</code> 处理</td>\n<td>直接赋值即可</td>\n</tr>\n<tr>\n<td><strong>错误处理</strong></td>\n<td>链式调用 <code v-pre>.catch</code></td>\n<td>用 <code v-pre>try/catch</code> 包裹</td>\n</tr>\n<tr>\n<td><strong>适用环境</strong></td>\n<td>所有 JavaScript 环境</td>\n<td>必须在 <code v-pre>async</code> 函数中使用</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"_4-常见误区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-常见误区\"><span>4. <strong>常见误区</strong></span></a></h3>\n<h4 id=\"误区-1-混淆-resolve-的参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#误区-1-混淆-resolve-的参数\"><span>误区 1：混淆 <code v-pre>resolve</code> 的参数</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 错误：试图 resolve 自身</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ❌ 循环引用</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 正确：resolve 一个值或另一个 Promise</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ✅ 正确</span></span></code></pre>\n</div><h4 id=\"误区-2-误以为-await-返回-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#误区-2-误以为-await-返回-promise\"><span>误区 2：误以为 <code v-pre>await</code> 返回 Promise</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">value</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 \"value\"，而不是 Promise 对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><hr>\n<h3 id=\"_5-实际应用示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-实际应用示例\"><span>5. <strong>实际应用示例</strong></span></a></h3>\n<h4 id=\"场景-1-用-then-处理结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#场景-1-用-then-处理结果\"><span>场景 1：用 <code v-pre>.then</code> 处理结果</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">),</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 通过 .then 处理</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span></code></pre>\n</div><h4 id=\"场景-2-用-await-直接获取结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#场景-2-用-await-直接获取结果\"><span>场景 2：用 <code v-pre>await</code> 直接获取结果</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 直接得到 \"数据\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n</div><hr>\n<h3 id=\"_6-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-总结\"><span>6. <strong>总结</strong></span></a></h3>\n<ul>\n<li><strong><code v-pre>new Promise</code></strong>：创建一个异步任务，通过 <code v-pre>.then</code>/<code v-pre>.catch</code> 处理结果。</li>\n<li><strong><code v-pre>await</code></strong>：在 <code v-pre>async</code> 函数中直接提取 Promise 的结果值，代码更简洁。</li>\n<li><strong>关键规则</strong>：\n<ul>\n<li><code v-pre>resolve</code> 必须传递普通值或另一个 Promise，不能引用自身。</li>\n<li><code v-pre>await</code> 只能在 <code v-pre>async</code> 函数中使用，否则会语法错误。</li>\n</ul>\n</li>\n</ul>\n</template>","contentStripped":"<p>在使用 <code v-pre>Promise</code> 的时候，遇到一些误区，同时总结处理 <code v-pre>Promise</code> 结果的方法。<br>\n对与Promise 的结果处理，需要从 JavaScript 的事件循环和 Promise 状态机角度来理解。</p>\n<!-- more -->\n<h3 id=\"_1-const-p1-new-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-const-p1-new-promise\"><span>1. <code v-pre>const p1 = new Promise(...)</code></span></a></h3>\n<h4 id=\"正确用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正确用法\"><span>正确用法：</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">((</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> reject</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 异步操作</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">成功结果</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">),</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 通过 .then 获取结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">通过 .then 获取到结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出：\"成功结果\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span></code></pre>\n</div><h4 id=\"resolve-错误用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#resolve-错误用法\"><span>resolve 错误用法</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">((</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ❌ 错误！不能将自身作为 resolve 的值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 会导致循环引用，抛出 TypeError: Chaining cycle detected for promise</span></span></code></pre>\n</div><p><strong>原因</strong>：<br>\nPromise 的 <code v-pre>resolve</code> 参数必须是<strong>普通值</strong>或<strong>另一个 Promise</strong>。如果传入自身，会导致无限递归（类似 <code v-pre>const a = { self: a }</code>），JavaScript 会直接抛出错误。</p>\n<hr>\n<h3 id=\"_2-const-p1-await-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-const-p1-await-promise\"><span>2. <code v-pre>const p1 = await Promise</code></span></a></h3>\n<h4 id=\"正确场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正确场景\"><span>正确场景：</span></a></h4>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> demo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 假设有一个已解决的 Promise</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">结果值</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 使用 await 提取结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ✅ p1 直接是 \"结果值\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出：\"结果值\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">demo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4 id=\"关键点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#关键点\"><span>关键点：</span></a></h4>\n<ul>\n<li><code v-pre>await</code> 会<strong>自动提取 Promise 的结果值</strong>，无需手动调用 <code v-pre>.then</code>。</li>\n<li>如果 Promise 被拒绝（rejected），<code v-pre>await</code> 会抛出异常，需要用 <code v-pre>try/catch</code> 捕获。</li>\n</ul>\n<hr>\n<h3 id=\"_3-核心区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-核心区别\"><span>3. <strong>核心区别</strong></span></a></h3>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th><code v-pre>new Promise</code> + <code v-pre>.then</code></th>\n<th><code v-pre>await</code> 获取结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>类型</strong></td>\n<td><code v-pre>p1</code> 是 Promise 对象</td>\n<td><code v-pre>p1</code> 是 Promise 的结果值（非 Promise）</td>\n</tr>\n<tr>\n<td><strong>获取结果方式</strong></td>\n<td>必须通过 <code v-pre>.then</code> 或 <code v-pre>.catch</code> 处理</td>\n<td>直接赋值即可</td>\n</tr>\n<tr>\n<td><strong>错误处理</strong></td>\n<td>链式调用 <code v-pre>.catch</code></td>\n<td>用 <code v-pre>try/catch</code> 包裹</td>\n</tr>\n<tr>\n<td><strong>适用环境</strong></td>\n<td>所有 JavaScript 环境</td>\n<td>必须在 <code v-pre>async</code> 函数中使用</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"_4-常见误区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-常见误区\"><span>4. <strong>常见误区</strong></span></a></h3>\n<h4 id=\"误区-1-混淆-resolve-的参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#误区-1-混淆-resolve-的参数\"><span>误区 1：混淆 <code v-pre>resolve</code> 的参数</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 错误：试图 resolve 自身</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ❌ 循环引用</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 正确：resolve 一个值或另一个 Promise</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // ✅ 正确</span></span></code></pre>\n</div><h4 id=\"误区-2-误以为-await-返回-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#误区-2-误以为-await-返回-promise\"><span>误区 2：误以为 <code v-pre>await</code> 返回 Promise</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">value</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 \"value\"，而不是 Promise 对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><hr>\n<h3 id=\"_5-实际应用示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-实际应用示例\"><span>5. <strong>实际应用示例</strong></span></a></h3>\n<h4 id=\"场景-1-用-then-处理结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#场景-1-用-then-处理结果\"><span>场景 1：用 <code v-pre>.then</code> 处理结果</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">),</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 通过 .then 处理</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">p1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span></code></pre>\n</div><h4 id=\"场景-2-用-await-直接获取结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#场景-2-用-await-直接获取结果\"><span>场景 2：用 <code v-pre>await</code> 直接获取结果</span></a></h4>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 直接得到 \"数据\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n</div><hr>\n<h3 id=\"_6-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-总结\"><span>6. <strong>总结</strong></span></a></h3>\n<ul>\n<li><strong><code v-pre>new Promise</code></strong>：创建一个异步任务，通过 <code v-pre>.then</code>/<code v-pre>.catch</code> 处理结果。</li>\n<li><strong><code v-pre>await</code></strong>：在 <code v-pre>async</code> 函数中直接提取 Promise 的结果值，代码更简洁。</li>\n<li><strong>关键规则</strong>：\n<ul>\n<li><code v-pre>resolve</code> 必须传递普通值或另一个 Promise，不能引用自身。</li>\n<li><code v-pre>await</code> 只能在 <code v-pre>async</code> 函数中使用，否则会语法错误。</li>\n</ul>\n</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"在使用 `Promise` 的时候，遇到一些误区，同时总结处理 `Promise` 结果的方法。  \r\n对与Promise 的结果处理，需要从 JavaScript 的事件循环和 Promise 状态机角度来理解。\r\n\r\n<!-- more -->\r\n\r\n### 1. `const p1 = new Promise(...)`\r\n#### 正确用法：\r\n```javascript\r\nconst p1 = new Promise((resolve, reject) => {\r\n  // 异步操作\r\n  setTimeout(() => resolve(\"成功结果\"), 1000);\r\n});\r\n\r\n// 通过 .then 获取结果\r\np1.then(result => {\r\n  console.log(\"通过 .then 获取到结果:\", result); // 输出：\"成功结果\"\r\n});\r\n```\r\n\r\n#### resolve 错误用法\r\n```javascript\r\nconst p1 = new Promise((resolve) => {\r\n  resolve(p1); // ❌ 错误！不能将自身作为 resolve 的值\r\n});\r\n\r\n// 会导致循环引用，抛出 TypeError: Chaining cycle detected for promise\r\n```\r\n\r\n**原因**：  \r\nPromise 的 `resolve` 参数必须是**普通值**或**另一个 Promise**。如果传入自身，会导致无限递归（类似 `const a = { self: a }`），JavaScript 会直接抛出错误。\r\n\r\n---\r\n\r\n### 2. `const p1 = await Promise`\r\n#### 正确场景：\r\n```javascript\r\nasync function demo() {\r\n  // 假设有一个已解决的 Promise\r\n  const promise = Promise.resolve(\"结果值\");\r\n  \r\n  // 使用 await 提取结果\r\n  const p1 = await promise; // ✅ p1 直接是 \"结果值\"\r\n  console.log(p1); // 输出：\"结果值\"\r\n}\r\n\r\ndemo();\r\n```\r\n\r\n#### 关键点：\r\n- `await` 会**自动提取 Promise 的结果值**，无需手动调用 `.then`。\r\n- 如果 Promise 被拒绝（rejected），`await` 会抛出异常，需要用 `try/catch` 捕获。\r\n\r\n---\r\n\r\n### 3. **核心区别**\r\n| 场景                  | `new Promise` + `.then`                     | `await` 获取结果                     |\r\n|-----------------------|---------------------------------------------|--------------------------------------|\r\n| **类型**              | `p1` 是 Promise 对象                        | `p1` 是 Promise 的结果值（非 Promise）|\r\n| **获取结果方式**      | 必须通过 `.then` 或 `.catch` 处理           | 直接赋值即可                         |\r\n| **错误处理**          | 链式调用 `.catch`                           | 用 `try/catch` 包裹                  |\r\n| **适用环境**          | 所有 JavaScript 环境                        | 必须在 `async` 函数中使用            |\r\n\r\n---\r\n\r\n### 4. **常见误区**\r\n#### 误区 1：混淆 `resolve` 的参数\r\n```javascript\r\n// 错误：试图 resolve 自身\r\nnew Promise(resolve => resolve(p1)); // ❌ 循环引用\r\n\r\n// 正确：resolve 一个值或另一个 Promise\r\nnew Promise(resolve => resolve(42)); // ✅ 正确\r\n```\r\n\r\n#### 误区 2：误以为 `await` 返回 Promise\r\n```javascript\r\nasync function test() {\r\n  const p = await Promise.resolve(\"value\");\r\n  console.log(p); // 输出 \"value\"，而不是 Promise 对象\r\n}\r\n```\r\n\r\n---\r\n\r\n### 5. **实际应用示例**\r\n#### 场景 1：用 `.then` 处理结果\r\n```javascript\r\nfunction fetchData() {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(\"数据\"), 1000);\r\n  });\r\n}\r\n\r\n// 通过 .then 处理\r\nconst p1 = fetchData();\r\np1.then(data => console.log(\"数据:\", data));\r\n```\r\n\r\n#### 场景 2：用 `await` 直接获取结果\r\n```javascript\r\nasync function handleData() {\r\n  const data = await fetchData(); // 直接得到 \"数据\"\r\n  console.log(\"数据:\", data);\r\n}\r\n\r\nhandleData();\r\n```\r\n\r\n---\r\n\r\n### 6. **总结**\r\n- **`new Promise`**：创建一个异步任务，通过 `.then`/`.catch` 处理结果。\r\n- **`await`**：在 `async` 函数中直接提取 Promise 的结果值，代码更简洁。\r\n- **关键规则**：\r\n    - `resolve` 必须传递普通值或另一个 Promise，不能引用自身。\r\n    - `await` 只能在 `async` 函数中使用，否则会语法错误。","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":3,"title":"1. const p1 = new Promise(...)","slug":"_1-const-p1-new-promise","link":"#_1-const-p1-new-promise","children":[]},{"level":3,"title":"2. const p1 = await Promise","slug":"_2-const-p1-await-promise","link":"#_2-const-p1-await-promise","children":[]},{"level":3,"title":"3. 核心区别","slug":"_3-核心区别","link":"#_3-核心区别","children":[]},{"level":3,"title":"4. 常见误区","slug":"_4-常见误区","link":"#_4-常见误区","children":[]},{"level":3,"title":"5. 实际应用示例","slug":"_5-实际应用示例","link":"#_5-实际应用示例","children":[]},{"level":3,"title":"6. 总结","slug":"_6-总结","link":"#_6-总结","children":[]}]}}
