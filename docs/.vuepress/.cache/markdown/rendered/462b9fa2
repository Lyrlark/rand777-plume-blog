{"content":"<h2 id=\"概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#概述\"><span>概述</span></a></h2>\n<p>在软件开发过程中，版本控制是至关重要的一环。Git 作为目前最流行的分布式版本控制系统，为开发者提供了强大而灵活的分支管理功能。通过使用 Git 分支，团队成员可以并行开发不同的功能，同时保持代码库的整洁和可维护性。本文将全面总结 Git 分支的相关知识，包括底层原理、常用用法和命令。</p>\n<h2 id=\"_1-底层原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-底层原理\"><span>1. 底层原理</span></a></h2>\n<h3 id=\"什么是-git-分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是-git-分支\"><span>什么是 Git 分支</span></a></h3>\n<p>在 Git 中，分支本质上是一个指向某个提交对象的可变指针。每次提交时，Git 会创建一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。而分支就是一个指向这些提交对象的指针，它可以随着新的提交而移动。</p>\n<h3 id=\"分支的创建与移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分支的创建与移动\"><span>分支的创建与移动</span></a></h3>\n<p>当我们初始化一个 Git 仓库时，默认会有一个名为 <code v-pre>master</code>（现在很多默认是 <code v-pre>main</code>）的分支。这个分支的指针指向仓库中的第一个提交对象。当我们创建一个新的分支时，Git 会创建一个新的指针，该指针指向当前分支所指向的提交对象。例如，使用以下命令创建一个名为 <code v-pre>new-feature</code> 的分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>此时，<code v-pre>new-feature</code> 分支和当前分支（假设为 <code v-pre>main</code>）指向同一个提交对象。当我们切换到 <code v-pre>new-feature</code> 分支并进行新的提交时，<code v-pre>new-feature</code> 分支的指针会向前移动，而 <code v-pre>main</code> 分支的指针保持不变。</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 进行一些代码修改</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> .</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Add new feature</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><h3 id=\"分支的合并\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分支的合并\"><span>分支的合并</span></a></h3>\n<p>当我们在某个分支上完成了开发任务后，通常需要将该分支的修改合并到主分支或其他目标分支上。Git 提供了多种合并方式，最常见的是快进合并（Fast-forward）和三方合并（Three-way merge）。</p>\n<ul>\n<li><strong>快进合并</strong>：如果目标分支在创建新分支后没有进行新的提交，那么在合并时，Git 会直接将目标分支的指针向前移动到新分支的位置，这种合并方式称为快进合并。</li>\n<li><strong>三方合并</strong>：如果目标分支在创建新分支后也有了新的提交，那么 Git 会使用三方合并算法。该算法会找到两个分支的共同祖先提交对象，然后将两个分支的修改合并到一起，生成一个新的合并提交对象。</li>\n</ul>\n<h2 id=\"_2-常用用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-常用用法\"><span>2. 常用用法</span></a></h2>\n<h3 id=\"创建分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建分支\"><span>创建分支</span></a></h3>\n<p>创建新分支的命令非常简单，使用 <code v-pre>git branch</code> 命令即可：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果想要在创建分支的同时切换到该分支，可以使用 <code v-pre>git checkout -b</code> 命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -b</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h3 id=\"切换分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#切换分支\"><span>切换分支</span></a></h3>\n<p>使用 <code v-pre>git checkout</code> 命令可以切换到已有的分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> main</span></span></code></pre>\n\n</div><p>从 Git 2.23 版本开始，也可以使用 <code v-pre>git switch</code> 命令来切换分支，它的语法更加直观：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> switch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h3 id=\"查看分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看分支\"><span>查看分支</span></a></h3>\n<p>使用 <code v-pre>git branch</code> 命令可以查看本地仓库中的所有分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span></span></code></pre>\n\n</div><p>如果想要查看远程仓库的分支信息，可以使用 <code v-pre>git branch -r</code> 命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -r</span></span></code></pre>\n\n</div><p>使用 <code v-pre>git branch -a</code> 命令可以同时查看本地和远程仓库的分支信息：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span></span></code></pre>\n\n</div><h3 id=\"合并分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#合并分支\"><span>合并分支</span></a></h3>\n<p>将一个分支的修改合并到当前分支可以使用 <code v-pre>git merge</code> 命令。例如，将 <code v-pre>new-feature</code> 分支合并到 <code v-pre>main</code> 分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> main</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> merge</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果合并过程中出现冲突，需要手动解决冲突后再进行提交。</p>\n<h3 id=\"删除分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#删除分支\"><span>删除分支</span></a></h3>\n<p>当一个分支的开发任务完成并合并到主分支后，可以使用 <code v-pre>git branch -d</code> 命令删除该分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果分支上的修改还没有合并到主分支，使用 <code v-pre>-d</code> 选项会提示删除失败。此时可以使用 <code v-pre>-D</code> 选项强制删除分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -D</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h2 id=\"_3-常用命令总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-常用命令总结\"><span>3. 常用命令总结</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>git branch</code></td>\n<td>查看本地分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -r</code></td>\n<td>查看远程分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -a</code></td>\n<td>查看本地和远程分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch &lt;branch-name&gt;</code></td>\n<td>创建新分支</td>\n</tr>\n<tr>\n<td><code v-pre>git checkout &lt;branch-name&gt;</code></td>\n<td>切换到指定分支</td>\n</tr>\n<tr>\n<td><code v-pre>git checkout -b &lt;branch-name&gt;</code></td>\n<td>创建并切换到新分支</td>\n</tr>\n<tr>\n<td><code v-pre>git switch &lt;branch-name&gt;</code></td>\n<td>切换到指定分支（Git 2.23+）</td>\n</tr>\n<tr>\n<td><code v-pre>git switch -c &lt;branch-name&gt;</code></td>\n<td>创建并切换到新分支（Git 2.23+）</td>\n</tr>\n<tr>\n<td><code v-pre>git merge &lt;branch-name&gt;</code></td>\n<td>将指定分支合并到当前分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -d &lt;branch-name&gt;</code></td>\n<td>删除已合并的分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -D &lt;branch-name&gt;</code></td>\n<td>强制删除未合并的分支</td>\n</tr>\n</tbody>\n</table>\n","env":{"base":"/","filePath":"G:/200-Project/hoey-blog-plume/docs/notes/patch/Git/分支管理.md","filePathRelative":"notes/patch/Git/分支管理.md","frontmatter":{"title":"分支管理","createTime":"2025/03/12 17:25:33","permalink":"/patch/git/5qv6xbvm/","tags":["Git"]},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#概述\"><span>概述</span></a></h2>\n<p>在软件开发过程中，版本控制是至关重要的一环。Git 作为目前最流行的分布式版本控制系统，为开发者提供了强大而灵活的分支管理功能。通过使用 Git 分支，团队成员可以并行开发不同的功能，同时保持代码库的整洁和可维护性。本文将全面总结 Git 分支的相关知识，包括底层原理、常用用法和命令。</p>\n<h2 id=\"_1-底层原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-底层原理\"><span>1. 底层原理</span></a></h2>\n<h3 id=\"什么是-git-分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是-git-分支\"><span>什么是 Git 分支</span></a></h3>\n<p>在 Git 中，分支本质上是一个指向某个提交对象的可变指针。每次提交时，Git 会创建一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。而分支就是一个指向这些提交对象的指针，它可以随着新的提交而移动。</p>\n<h3 id=\"分支的创建与移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分支的创建与移动\"><span>分支的创建与移动</span></a></h3>\n<p>当我们初始化一个 Git 仓库时，默认会有一个名为 <code v-pre>master</code>（现在很多默认是 <code v-pre>main</code>）的分支。这个分支的指针指向仓库中的第一个提交对象。当我们创建一个新的分支时，Git 会创建一个新的指针，该指针指向当前分支所指向的提交对象。例如，使用以下命令创建一个名为 <code v-pre>new-feature</code> 的分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>此时，<code v-pre>new-feature</code> 分支和当前分支（假设为 <code v-pre>main</code>）指向同一个提交对象。当我们切换到 <code v-pre>new-feature</code> 分支并进行新的提交时，<code v-pre>new-feature</code> 分支的指针会向前移动，而 <code v-pre>main</code> 分支的指针保持不变。</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 进行一些代码修改</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> .</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Add new feature</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><h3 id=\"分支的合并\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分支的合并\"><span>分支的合并</span></a></h3>\n<p>当我们在某个分支上完成了开发任务后，通常需要将该分支的修改合并到主分支或其他目标分支上。Git 提供了多种合并方式，最常见的是快进合并（Fast-forward）和三方合并（Three-way merge）。</p>\n<ul>\n<li><strong>快进合并</strong>：如果目标分支在创建新分支后没有进行新的提交，那么在合并时，Git 会直接将目标分支的指针向前移动到新分支的位置，这种合并方式称为快进合并。</li>\n<li><strong>三方合并</strong>：如果目标分支在创建新分支后也有了新的提交，那么 Git 会使用三方合并算法。该算法会找到两个分支的共同祖先提交对象，然后将两个分支的修改合并到一起，生成一个新的合并提交对象。</li>\n</ul>\n<h2 id=\"_2-常用用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-常用用法\"><span>2. 常用用法</span></a></h2>\n<h3 id=\"创建分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建分支\"><span>创建分支</span></a></h3>\n<p>创建新分支的命令非常简单，使用 <code v-pre>git branch</code> 命令即可：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果想要在创建分支的同时切换到该分支，可以使用 <code v-pre>git checkout -b</code> 命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -b</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h3 id=\"切换分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#切换分支\"><span>切换分支</span></a></h3>\n<p>使用 <code v-pre>git checkout</code> 命令可以切换到已有的分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> main</span></span></code></pre>\n\n</div><p>从 Git 2.23 版本开始，也可以使用 <code v-pre>git switch</code> 命令来切换分支，它的语法更加直观：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> switch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h3 id=\"查看分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看分支\"><span>查看分支</span></a></h3>\n<p>使用 <code v-pre>git branch</code> 命令可以查看本地仓库中的所有分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span></span></code></pre>\n\n</div><p>如果想要查看远程仓库的分支信息，可以使用 <code v-pre>git branch -r</code> 命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -r</span></span></code></pre>\n\n</div><p>使用 <code v-pre>git branch -a</code> 命令可以同时查看本地和远程仓库的分支信息：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span></span></code></pre>\n\n</div><h3 id=\"合并分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#合并分支\"><span>合并分支</span></a></h3>\n<p>将一个分支的修改合并到当前分支可以使用 <code v-pre>git merge</code> 命令。例如，将 <code v-pre>new-feature</code> 分支合并到 <code v-pre>main</code> 分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> main</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> merge</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果合并过程中出现冲突，需要手动解决冲突后再进行提交。</p>\n<h3 id=\"删除分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#删除分支\"><span>删除分支</span></a></h3>\n<p>当一个分支的开发任务完成并合并到主分支后，可以使用 <code v-pre>git branch -d</code> 命令删除该分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果分支上的修改还没有合并到主分支，使用 <code v-pre>-d</code> 选项会提示删除失败。此时可以使用 <code v-pre>-D</code> 选项强制删除分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -D</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h2 id=\"_3-常用命令总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-常用命令总结\"><span>3. 常用命令总结</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>git branch</code></td>\n<td>查看本地分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -r</code></td>\n<td>查看远程分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -a</code></td>\n<td>查看本地和远程分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch &lt;branch-name&gt;</code></td>\n<td>创建新分支</td>\n</tr>\n<tr>\n<td><code v-pre>git checkout &lt;branch-name&gt;</code></td>\n<td>切换到指定分支</td>\n</tr>\n<tr>\n<td><code v-pre>git checkout -b &lt;branch-name&gt;</code></td>\n<td>创建并切换到新分支</td>\n</tr>\n<tr>\n<td><code v-pre>git switch &lt;branch-name&gt;</code></td>\n<td>切换到指定分支（Git 2.23+）</td>\n</tr>\n<tr>\n<td><code v-pre>git switch -c &lt;branch-name&gt;</code></td>\n<td>创建并切换到新分支（Git 2.23+）</td>\n</tr>\n<tr>\n<td><code v-pre>git merge &lt;branch-name&gt;</code></td>\n<td>将指定分支合并到当前分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -d &lt;branch-name&gt;</code></td>\n<td>删除已合并的分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -D &lt;branch-name&gt;</code></td>\n<td>强制删除未合并的分支</td>\n</tr>\n</tbody>\n</table>\n</template>","contentStripped":"<h2 id=\"概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#概述\"><span>概述</span></a></h2>\n<p>在软件开发过程中，版本控制是至关重要的一环。Git 作为目前最流行的分布式版本控制系统，为开发者提供了强大而灵活的分支管理功能。通过使用 Git 分支，团队成员可以并行开发不同的功能，同时保持代码库的整洁和可维护性。本文将全面总结 Git 分支的相关知识，包括底层原理、常用用法和命令。</p>\n<h2 id=\"_1-底层原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-底层原理\"><span>1. 底层原理</span></a></h2>\n<h3 id=\"什么是-git-分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是-git-分支\"><span>什么是 Git 分支</span></a></h3>\n<p>在 Git 中，分支本质上是一个指向某个提交对象的可变指针。每次提交时，Git 会创建一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。而分支就是一个指向这些提交对象的指针，它可以随着新的提交而移动。</p>\n<h3 id=\"分支的创建与移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分支的创建与移动\"><span>分支的创建与移动</span></a></h3>\n<p>当我们初始化一个 Git 仓库时，默认会有一个名为 <code v-pre>master</code>（现在很多默认是 <code v-pre>main</code>）的分支。这个分支的指针指向仓库中的第一个提交对象。当我们创建一个新的分支时，Git 会创建一个新的指针，该指针指向当前分支所指向的提交对象。例如，使用以下命令创建一个名为 <code v-pre>new-feature</code> 的分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>此时，<code v-pre>new-feature</code> 分支和当前分支（假设为 <code v-pre>main</code>）指向同一个提交对象。当我们切换到 <code v-pre>new-feature</code> 分支并进行新的提交时，<code v-pre>new-feature</code> 分支的指针会向前移动，而 <code v-pre>main</code> 分支的指针保持不变。</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 进行一些代码修改</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> .</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Add new feature</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><h3 id=\"分支的合并\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分支的合并\"><span>分支的合并</span></a></h3>\n<p>当我们在某个分支上完成了开发任务后，通常需要将该分支的修改合并到主分支或其他目标分支上。Git 提供了多种合并方式，最常见的是快进合并（Fast-forward）和三方合并（Three-way merge）。</p>\n<ul>\n<li><strong>快进合并</strong>：如果目标分支在创建新分支后没有进行新的提交，那么在合并时，Git 会直接将目标分支的指针向前移动到新分支的位置，这种合并方式称为快进合并。</li>\n<li><strong>三方合并</strong>：如果目标分支在创建新分支后也有了新的提交，那么 Git 会使用三方合并算法。该算法会找到两个分支的共同祖先提交对象，然后将两个分支的修改合并到一起，生成一个新的合并提交对象。</li>\n</ul>\n<h2 id=\"_2-常用用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-常用用法\"><span>2. 常用用法</span></a></h2>\n<h3 id=\"创建分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建分支\"><span>创建分支</span></a></h3>\n<p>创建新分支的命令非常简单，使用 <code v-pre>git branch</code> 命令即可：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果想要在创建分支的同时切换到该分支，可以使用 <code v-pre>git checkout -b</code> 命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -b</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h3 id=\"切换分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#切换分支\"><span>切换分支</span></a></h3>\n<p>使用 <code v-pre>git checkout</code> 命令可以切换到已有的分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> main</span></span></code></pre>\n\n</div><p>从 Git 2.23 版本开始，也可以使用 <code v-pre>git switch</code> 命令来切换分支，它的语法更加直观：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> switch</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h3 id=\"查看分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看分支\"><span>查看分支</span></a></h3>\n<p>使用 <code v-pre>git branch</code> 命令可以查看本地仓库中的所有分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span></span></code></pre>\n\n</div><p>如果想要查看远程仓库的分支信息，可以使用 <code v-pre>git branch -r</code> 命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -r</span></span></code></pre>\n\n</div><p>使用 <code v-pre>git branch -a</code> 命令可以同时查看本地和远程仓库的分支信息：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span></span></code></pre>\n\n</div><h3 id=\"合并分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#合并分支\"><span>合并分支</span></a></h3>\n<p>将一个分支的修改合并到当前分支可以使用 <code v-pre>git merge</code> 命令。例如，将 <code v-pre>new-feature</code> 分支合并到 <code v-pre>main</code> 分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> checkout</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> main</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> merge</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果合并过程中出现冲突，需要手动解决冲突后再进行提交。</p>\n<h3 id=\"删除分支\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#删除分支\"><span>删除分支</span></a></h3>\n<p>当一个分支的开发任务完成并合并到主分支后，可以使用 <code v-pre>git branch -d</code> 命令删除该分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><p>如果分支上的修改还没有合并到主分支，使用 <code v-pre>-d</code> 选项会提示删除失败。此时可以使用 <code v-pre>-D</code> 选项强制删除分支：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> branch</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -D</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> new-feature</span></span></code></pre>\n\n</div><h2 id=\"_3-常用命令总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-常用命令总结\"><span>3. 常用命令总结</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>git branch</code></td>\n<td>查看本地分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -r</code></td>\n<td>查看远程分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -a</code></td>\n<td>查看本地和远程分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch &lt;branch-name&gt;</code></td>\n<td>创建新分支</td>\n</tr>\n<tr>\n<td><code v-pre>git checkout &lt;branch-name&gt;</code></td>\n<td>切换到指定分支</td>\n</tr>\n<tr>\n<td><code v-pre>git checkout -b &lt;branch-name&gt;</code></td>\n<td>创建并切换到新分支</td>\n</tr>\n<tr>\n<td><code v-pre>git switch &lt;branch-name&gt;</code></td>\n<td>切换到指定分支（Git 2.23+）</td>\n</tr>\n<tr>\n<td><code v-pre>git switch -c &lt;branch-name&gt;</code></td>\n<td>创建并切换到新分支（Git 2.23+）</td>\n</tr>\n<tr>\n<td><code v-pre>git merge &lt;branch-name&gt;</code></td>\n<td>将指定分支合并到当前分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -d &lt;branch-name&gt;</code></td>\n<td>删除已合并的分支</td>\n</tr>\n<tr>\n<td><code v-pre>git branch -D &lt;branch-name&gt;</code></td>\n<td>强制删除未合并的分支</td>\n</tr>\n</tbody>\n</table>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"## 概述\n在软件开发过程中，版本控制是至关重要的一环。Git 作为目前最流行的分布式版本控制系统，为开发者提供了强大而灵活的分支管理功能。通过使用 Git 分支，团队成员可以并行开发不同的功能，同时保持代码库的整洁和可维护性。本文将全面总结 Git 分支的相关知识，包括底层原理、常用用法和命令。\n\n## 1. 底层原理\n### 什么是 Git 分支\n在 Git 中，分支本质上是一个指向某个提交对象的可变指针。每次提交时，Git 会创建一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。而分支就是一个指向这些提交对象的指针，它可以随着新的提交而移动。\n\n### 分支的创建与移动\n当我们初始化一个 Git 仓库时，默认会有一个名为 `master`（现在很多默认是 `main`）的分支。这个分支的指针指向仓库中的第一个提交对象。当我们创建一个新的分支时，Git 会创建一个新的指针，该指针指向当前分支所指向的提交对象。例如，使用以下命令创建一个名为 `new-feature` 的分支：\n```bash\ngit branch new-feature\n```\n此时，`new-feature` 分支和当前分支（假设为 `main`）指向同一个提交对象。当我们切换到 `new-feature` 分支并进行新的提交时，`new-feature` 分支的指针会向前移动，而 `main` 分支的指针保持不变。\n```bash\ngit checkout new-feature\n# 进行一些代码修改\ngit add .\ngit commit -m \"Add new feature\"\n```\n\n### 分支的合并\n当我们在某个分支上完成了开发任务后，通常需要将该分支的修改合并到主分支或其他目标分支上。Git 提供了多种合并方式，最常见的是快进合并（Fast-forward）和三方合并（Three-way merge）。\n- **快进合并**：如果目标分支在创建新分支后没有进行新的提交，那么在合并时，Git 会直接将目标分支的指针向前移动到新分支的位置，这种合并方式称为快进合并。\n- **三方合并**：如果目标分支在创建新分支后也有了新的提交，那么 Git 会使用三方合并算法。该算法会找到两个分支的共同祖先提交对象，然后将两个分支的修改合并到一起，生成一个新的合并提交对象。\n\n## 2. 常用用法\n### 创建分支\n创建新分支的命令非常简单，使用 `git branch` 命令即可：\n```bash\ngit branch new-feature\n```\n如果想要在创建分支的同时切换到该分支，可以使用 `git checkout -b` 命令：\n```bash\ngit checkout -b new-feature\n```\n\n### 切换分支\n使用 `git checkout` 命令可以切换到已有的分支：\n```bash\ngit checkout main\n```\n从 Git 2.23 版本开始，也可以使用 `git switch` 命令来切换分支，它的语法更加直观：\n```bash\ngit switch new-feature\n```\n\n### 查看分支\n使用 `git branch` 命令可以查看本地仓库中的所有分支：\n```bash\ngit branch\n```\n如果想要查看远程仓库的分支信息，可以使用 `git branch -r` 命令：\n```bash\ngit branch -r\n```\n使用 `git branch -a` 命令可以同时查看本地和远程仓库的分支信息：\n```bash\ngit branch -a\n```\n\n### 合并分支\n将一个分支的修改合并到当前分支可以使用 `git merge` 命令。例如，将 `new-feature` 分支合并到 `main` 分支：\n```bash\ngit checkout main\ngit merge new-feature\n```\n如果合并过程中出现冲突，需要手动解决冲突后再进行提交。\n\n### 删除分支\n当一个分支的开发任务完成并合并到主分支后，可以使用 `git branch -d` 命令删除该分支：\n```bash\ngit branch -d new-feature\n```\n如果分支上的修改还没有合并到主分支，使用 `-d` 选项会提示删除失败。此时可以使用 `-D` 选项强制删除分支：\n```bash\ngit branch -D new-feature\n```\n\n## 3. 常用命令总结\n| 命令 | 描述 |\n| --- | --- |\n| `git branch` | 查看本地分支 |\n| `git branch -r` | 查看远程分支 |\n| `git branch -a` | 查看本地和远程分支 |\n| `git branch <branch-name>` | 创建新分支 |\n| `git checkout <branch-name>` | 切换到指定分支 |\n| `git checkout -b <branch-name>` | 创建并切换到新分支 |\n| `git switch <branch-name>` | 切换到指定分支（Git 2.23+） |\n| `git switch -c <branch-name>` | 创建并切换到新分支（Git 2.23+） |\n| `git merge <branch-name>` | 将指定分支合并到当前分支 |\n| `git branch -d <branch-name>` | 删除已合并的分支 |\n| `git branch -D <branch-name>` | 强制删除未合并的分支 |","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"1. 底层原理","slug":"_1-底层原理","link":"#_1-底层原理","children":[{"level":3,"title":"什么是 Git 分支","slug":"什么是-git-分支","link":"#什么是-git-分支","children":[]},{"level":3,"title":"分支的创建与移动","slug":"分支的创建与移动","link":"#分支的创建与移动","children":[]},{"level":3,"title":"分支的合并","slug":"分支的合并","link":"#分支的合并","children":[]}]},{"level":2,"title":"2. 常用用法","slug":"_2-常用用法","link":"#_2-常用用法","children":[{"level":3,"title":"创建分支","slug":"创建分支","link":"#创建分支","children":[]},{"level":3,"title":"切换分支","slug":"切换分支","link":"#切换分支","children":[]},{"level":3,"title":"查看分支","slug":"查看分支","link":"#查看分支","children":[]},{"level":3,"title":"合并分支","slug":"合并分支","link":"#合并分支","children":[]},{"level":3,"title":"删除分支","slug":"删除分支","link":"#删除分支","children":[]}]},{"level":2,"title":"3. 常用命令总结","slug":"_3-常用命令总结","link":"#_3-常用命令总结","children":[]}]}}
