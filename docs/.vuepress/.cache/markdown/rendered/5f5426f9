{"content":"<h2 id=\"四个工作区域\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#四个工作区域\"><span>四个工作区域</span></a></h2>\n<ul>\n<li>Remote：远程仓库</li>\n<li>Repository：本地仓库</li>\n<li>index：暂存区</li>\n<li>workspace：工作区</li>\n</ul>\n<h2 id=\"工作区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#工作区\"><span>工作区</span></a></h2>\n<ul>\n<li><strong>定义</strong>：工作区是你在本地计算机中实际看到并进行文件编辑操作的目录。简单来说，就是你能在文件资源管理器（Windows）或 Finder（Mac）中看到并对文件进行修改、创建、删除等操作的地方。</li>\n<li><strong>示例</strong>：假设你在本地创建了一个名为 <code v-pre>my_project</code> 的文件夹用于开发项目，这个 <code v-pre>my_project</code> 文件夹就是工作区。你在其中创建了 <code v-pre>index.html</code>、<code v-pre>style.css</code> 等文件，对它们进行的各种编辑操作都发生在工作区。</li>\n</ul>\n<h2 id=\"暂存区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#暂存区\"><span>暂存区</span></a></h2>\n<ul>\n<li><strong>定义</strong>：暂存区是一个中间区域，它像一个缓冲区，用于准备要提交到本地仓库的文件和修改。当你对工作区的文件进行了修改后，需要手动将这些修改添加到暂存区。</li>\n<li><strong>作用</strong>：暂存区的存在让你可以灵活地组织和规划每次提交的内容。你可以选择只将部分修改添加到暂存区，而不是一次性提交所有修改。</li>\n<li><strong>示例</strong>：你在工作区修改了 <code v-pre>index.html</code> 和 <code v-pre>style.css</code> 两个文件，使用 <code v-pre>git add index.html</code> 命令，就将 <code v-pre>index.html</code> 文件的修改添加到了暂存区，而 <code v-pre>style.css</code> 文件的修改仍留在工作区。</li>\n</ul>\n<h2 id=\"本地仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#本地仓库\"><span>本地仓库</span></a></h2>\n<ul>\n<li><strong>定义</strong>：本地仓库是存储在你本地计算机上的完整版本库，包含了项目的所有提交历史、分支信息等。它是由 <code v-pre>.git</code> 目录组成，当你使用 <code v-pre>git init</code> 命令初始化一个项目时，就会在项目根目录下创建这个 <code v-pre>.git</code> 目录。</li>\n<li><strong>操作</strong>：当你使用 <code v-pre>git commit</code> 命令时，暂存区的内容会被永久保存到本地仓库，形成一个新的提交记录。</li>\n<li><strong>示例</strong>：执行 <code v-pre>git commit -m &quot;Update index.html&quot;</code> 后，暂存区中关于 <code v-pre>index.html</code> 的修改就会被提交到本地仓库，本地仓库会记录这次提交的相关信息，如提交的哈希值、作者、提交时间和提交信息等。</li>\n</ul>\n<h2 id=\"远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#远程仓库\"><span>远程仓库</span></a></h2>\n<ul>\n<li><strong>定义</strong>：远程仓库是存储在远程服务器上的版本库，常见的远程仓库托管平台有 GitHub、GitLab、Bitbucket 等。远程仓库用于团队成员之间共享代码、协作开发。</li>\n<li><strong>交互</strong>：你可以通过 <code v-pre>git push</code> 命令将本地仓库的提交推送到远程仓库，也可以使用 <code v-pre>git pull</code> 命令从远程仓库拉取最新的代码并合并到本地仓库。</li>\n<li><strong>示例</strong>：当你完成了一个功能的开发，并且在本地仓库进行了多次提交后，使用 <code v-pre>git push origin main</code> 命令将本地 <code v-pre>main</code> 分支的提交推送到名为 <code v-pre>origin</code> 的远程仓库的 <code v-pre>main</code> 分支上。其他团队成员可以使用 <code v-pre>git pull</code> 命令获取你推送的最新代码。</li>\n</ul>\n<h2 id=\"交互流程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#交互流程\"><span>交互流程</span></a></h2>\n<p>一般的开发流程是：在工作区对文件进行修改，然后使用 <code v-pre>git add</code> 命令将修改添加到暂存区，接着使用 <code v-pre>git commit</code> 命令将暂存区的内容提交到本地仓库，最后使用 <code v-pre>git push</code> 命令将本地仓库的内容推送到远程仓库。反之，当需要获取远程仓库的最新代码时，使用 <code v-pre>git pull</code> 命令将远程仓库的内容拉取到本地仓库，再更新到工作区。</p>\n","env":{"base":"/","filePath":"D:/zhy-git/hoey-blog-plume/docs/notes/patch/Git/四个工作区.md","filePathRelative":"notes/patch/Git/四个工作区.md","frontmatter":{"title":"四个工作区","createTime":"2025/03/17 13:12:45","permalink":"/patch/git/fkmrjk5q/"},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"四个工作区域\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#四个工作区域\"><span>四个工作区域</span></a></h2>\n<ul>\n<li>Remote：远程仓库</li>\n<li>Repository：本地仓库</li>\n<li>index：暂存区</li>\n<li>workspace：工作区</li>\n</ul>\n<h2 id=\"工作区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#工作区\"><span>工作区</span></a></h2>\n<ul>\n<li><strong>定义</strong>：工作区是你在本地计算机中实际看到并进行文件编辑操作的目录。简单来说，就是你能在文件资源管理器（Windows）或 Finder（Mac）中看到并对文件进行修改、创建、删除等操作的地方。</li>\n<li><strong>示例</strong>：假设你在本地创建了一个名为 <code v-pre>my_project</code> 的文件夹用于开发项目，这个 <code v-pre>my_project</code> 文件夹就是工作区。你在其中创建了 <code v-pre>index.html</code>、<code v-pre>style.css</code> 等文件，对它们进行的各种编辑操作都发生在工作区。</li>\n</ul>\n<h2 id=\"暂存区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#暂存区\"><span>暂存区</span></a></h2>\n<ul>\n<li><strong>定义</strong>：暂存区是一个中间区域，它像一个缓冲区，用于准备要提交到本地仓库的文件和修改。当你对工作区的文件进行了修改后，需要手动将这些修改添加到暂存区。</li>\n<li><strong>作用</strong>：暂存区的存在让你可以灵活地组织和规划每次提交的内容。你可以选择只将部分修改添加到暂存区，而不是一次性提交所有修改。</li>\n<li><strong>示例</strong>：你在工作区修改了 <code v-pre>index.html</code> 和 <code v-pre>style.css</code> 两个文件，使用 <code v-pre>git add index.html</code> 命令，就将 <code v-pre>index.html</code> 文件的修改添加到了暂存区，而 <code v-pre>style.css</code> 文件的修改仍留在工作区。</li>\n</ul>\n<h2 id=\"本地仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#本地仓库\"><span>本地仓库</span></a></h2>\n<ul>\n<li><strong>定义</strong>：本地仓库是存储在你本地计算机上的完整版本库，包含了项目的所有提交历史、分支信息等。它是由 <code v-pre>.git</code> 目录组成，当你使用 <code v-pre>git init</code> 命令初始化一个项目时，就会在项目根目录下创建这个 <code v-pre>.git</code> 目录。</li>\n<li><strong>操作</strong>：当你使用 <code v-pre>git commit</code> 命令时，暂存区的内容会被永久保存到本地仓库，形成一个新的提交记录。</li>\n<li><strong>示例</strong>：执行 <code v-pre>git commit -m &quot;Update index.html&quot;</code> 后，暂存区中关于 <code v-pre>index.html</code> 的修改就会被提交到本地仓库，本地仓库会记录这次提交的相关信息，如提交的哈希值、作者、提交时间和提交信息等。</li>\n</ul>\n<h2 id=\"远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#远程仓库\"><span>远程仓库</span></a></h2>\n<ul>\n<li><strong>定义</strong>：远程仓库是存储在远程服务器上的版本库，常见的远程仓库托管平台有 GitHub、GitLab、Bitbucket 等。远程仓库用于团队成员之间共享代码、协作开发。</li>\n<li><strong>交互</strong>：你可以通过 <code v-pre>git push</code> 命令将本地仓库的提交推送到远程仓库，也可以使用 <code v-pre>git pull</code> 命令从远程仓库拉取最新的代码并合并到本地仓库。</li>\n<li><strong>示例</strong>：当你完成了一个功能的开发，并且在本地仓库进行了多次提交后，使用 <code v-pre>git push origin main</code> 命令将本地 <code v-pre>main</code> 分支的提交推送到名为 <code v-pre>origin</code> 的远程仓库的 <code v-pre>main</code> 分支上。其他团队成员可以使用 <code v-pre>git pull</code> 命令获取你推送的最新代码。</li>\n</ul>\n<h2 id=\"交互流程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#交互流程\"><span>交互流程</span></a></h2>\n<p>一般的开发流程是：在工作区对文件进行修改，然后使用 <code v-pre>git add</code> 命令将修改添加到暂存区，接着使用 <code v-pre>git commit</code> 命令将暂存区的内容提交到本地仓库，最后使用 <code v-pre>git push</code> 命令将本地仓库的内容推送到远程仓库。反之，当需要获取远程仓库的最新代码时，使用 <code v-pre>git pull</code> 命令将远程仓库的内容拉取到本地仓库，再更新到工作区。</p>\n</template>","contentStripped":"<h2 id=\"四个工作区域\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#四个工作区域\"><span>四个工作区域</span></a></h2>\n<ul>\n<li>Remote：远程仓库</li>\n<li>Repository：本地仓库</li>\n<li>index：暂存区</li>\n<li>workspace：工作区</li>\n</ul>\n<h2 id=\"工作区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#工作区\"><span>工作区</span></a></h2>\n<ul>\n<li><strong>定义</strong>：工作区是你在本地计算机中实际看到并进行文件编辑操作的目录。简单来说，就是你能在文件资源管理器（Windows）或 Finder（Mac）中看到并对文件进行修改、创建、删除等操作的地方。</li>\n<li><strong>示例</strong>：假设你在本地创建了一个名为 <code v-pre>my_project</code> 的文件夹用于开发项目，这个 <code v-pre>my_project</code> 文件夹就是工作区。你在其中创建了 <code v-pre>index.html</code>、<code v-pre>style.css</code> 等文件，对它们进行的各种编辑操作都发生在工作区。</li>\n</ul>\n<h2 id=\"暂存区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#暂存区\"><span>暂存区</span></a></h2>\n<ul>\n<li><strong>定义</strong>：暂存区是一个中间区域，它像一个缓冲区，用于准备要提交到本地仓库的文件和修改。当你对工作区的文件进行了修改后，需要手动将这些修改添加到暂存区。</li>\n<li><strong>作用</strong>：暂存区的存在让你可以灵活地组织和规划每次提交的内容。你可以选择只将部分修改添加到暂存区，而不是一次性提交所有修改。</li>\n<li><strong>示例</strong>：你在工作区修改了 <code v-pre>index.html</code> 和 <code v-pre>style.css</code> 两个文件，使用 <code v-pre>git add index.html</code> 命令，就将 <code v-pre>index.html</code> 文件的修改添加到了暂存区，而 <code v-pre>style.css</code> 文件的修改仍留在工作区。</li>\n</ul>\n<h2 id=\"本地仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#本地仓库\"><span>本地仓库</span></a></h2>\n<ul>\n<li><strong>定义</strong>：本地仓库是存储在你本地计算机上的完整版本库，包含了项目的所有提交历史、分支信息等。它是由 <code v-pre>.git</code> 目录组成，当你使用 <code v-pre>git init</code> 命令初始化一个项目时，就会在项目根目录下创建这个 <code v-pre>.git</code> 目录。</li>\n<li><strong>操作</strong>：当你使用 <code v-pre>git commit</code> 命令时，暂存区的内容会被永久保存到本地仓库，形成一个新的提交记录。</li>\n<li><strong>示例</strong>：执行 <code v-pre>git commit -m &quot;Update index.html&quot;</code> 后，暂存区中关于 <code v-pre>index.html</code> 的修改就会被提交到本地仓库，本地仓库会记录这次提交的相关信息，如提交的哈希值、作者、提交时间和提交信息等。</li>\n</ul>\n<h2 id=\"远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#远程仓库\"><span>远程仓库</span></a></h2>\n<ul>\n<li><strong>定义</strong>：远程仓库是存储在远程服务器上的版本库，常见的远程仓库托管平台有 GitHub、GitLab、Bitbucket 等。远程仓库用于团队成员之间共享代码、协作开发。</li>\n<li><strong>交互</strong>：你可以通过 <code v-pre>git push</code> 命令将本地仓库的提交推送到远程仓库，也可以使用 <code v-pre>git pull</code> 命令从远程仓库拉取最新的代码并合并到本地仓库。</li>\n<li><strong>示例</strong>：当你完成了一个功能的开发，并且在本地仓库进行了多次提交后，使用 <code v-pre>git push origin main</code> 命令将本地 <code v-pre>main</code> 分支的提交推送到名为 <code v-pre>origin</code> 的远程仓库的 <code v-pre>main</code> 分支上。其他团队成员可以使用 <code v-pre>git pull</code> 命令获取你推送的最新代码。</li>\n</ul>\n<h2 id=\"交互流程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#交互流程\"><span>交互流程</span></a></h2>\n<p>一般的开发流程是：在工作区对文件进行修改，然后使用 <code v-pre>git add</code> 命令将修改添加到暂存区，接着使用 <code v-pre>git commit</code> 命令将暂存区的内容提交到本地仓库，最后使用 <code v-pre>git push</code> 命令将本地仓库的内容推送到远程仓库。反之，当需要获取远程仓库的最新代码时，使用 <code v-pre>git pull</code> 命令将远程仓库的内容拉取到本地仓库，再更新到工作区。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"## 四个工作区域\r\n- Remote：远程仓库  \r\n- Repository：本地仓库  \r\n- index：暂存区  \r\n- workspace：工作区  \r\n\r\n## 工作区\r\n- **定义**：工作区是你在本地计算机中实际看到并进行文件编辑操作的目录。简单来说，就是你能在文件资源管理器（Windows）或 Finder（Mac）中看到并对文件进行修改、创建、删除等操作的地方。\r\n- **示例**：假设你在本地创建了一个名为 `my_project` 的文件夹用于开发项目，这个 `my_project` 文件夹就是工作区。你在其中创建了 `index.html`、`style.css` 等文件，对它们进行的各种编辑操作都发生在工作区。\r\n\r\n## 暂存区\r\n- **定义**：暂存区是一个中间区域，它像一个缓冲区，用于准备要提交到本地仓库的文件和修改。当你对工作区的文件进行了修改后，需要手动将这些修改添加到暂存区。\r\n- **作用**：暂存区的存在让你可以灵活地组织和规划每次提交的内容。你可以选择只将部分修改添加到暂存区，而不是一次性提交所有修改。\r\n- **示例**：你在工作区修改了 `index.html` 和 `style.css` 两个文件，使用 `git add index.html` 命令，就将 `index.html` 文件的修改添加到了暂存区，而 `style.css` 文件的修改仍留在工作区。\r\n\r\n## 本地仓库\r\n- **定义**：本地仓库是存储在你本地计算机上的完整版本库，包含了项目的所有提交历史、分支信息等。它是由 `.git` 目录组成，当你使用 `git init` 命令初始化一个项目时，就会在项目根目录下创建这个 `.git` 目录。\r\n- **操作**：当你使用 `git commit` 命令时，暂存区的内容会被永久保存到本地仓库，形成一个新的提交记录。\r\n- **示例**：执行 `git commit -m \"Update index.html\"` 后，暂存区中关于 `index.html` 的修改就会被提交到本地仓库，本地仓库会记录这次提交的相关信息，如提交的哈希值、作者、提交时间和提交信息等。\r\n\r\n## 远程仓库\r\n- **定义**：远程仓库是存储在远程服务器上的版本库，常见的远程仓库托管平台有 GitHub、GitLab、Bitbucket 等。远程仓库用于团队成员之间共享代码、协作开发。\r\n- **交互**：你可以通过 `git push` 命令将本地仓库的提交推送到远程仓库，也可以使用 `git pull` 命令从远程仓库拉取最新的代码并合并到本地仓库。\r\n- **示例**：当你完成了一个功能的开发，并且在本地仓库进行了多次提交后，使用 `git push origin main` 命令将本地 `main` 分支的提交推送到名为 `origin` 的远程仓库的 `main` 分支上。其他团队成员可以使用 `git pull` 命令获取你推送的最新代码。\r\n\r\n## 交互流程\r\n一般的开发流程是：在工作区对文件进行修改，然后使用 `git add` 命令将修改添加到暂存区，接着使用 `git commit` 命令将暂存区的内容提交到本地仓库，最后使用 `git push` 命令将本地仓库的内容推送到远程仓库。反之，当需要获取远程仓库的最新代码时，使用 `git pull` 命令将远程仓库的内容拉取到本地仓库，再更新到工作区。","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":2,"title":"四个工作区域","slug":"四个工作区域","link":"#四个工作区域","children":[]},{"level":2,"title":"工作区","slug":"工作区","link":"#工作区","children":[]},{"level":2,"title":"暂存区","slug":"暂存区","link":"#暂存区","children":[]},{"level":2,"title":"本地仓库","slug":"本地仓库","link":"#本地仓库","children":[]},{"level":2,"title":"远程仓库","slug":"远程仓库","link":"#远程仓库","children":[]},{"level":2,"title":"交互流程","slug":"交互流程","link":"#交互流程","children":[]}]}}
