{"content":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>HTTP 协议是？<br>\n常见的状态码有哪些？</p>\n</div>\n<hr>\n<h2 id=\"http-协议概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#http-协议概述\"><span>HTTP 协议概述</span></a></h2>\n<p>HTTP（Hypertext Transfer Protocol）即超文本传输协议，是用于在互联网上传输超文本的协议，它基于客户端 - 服务器模型工作。\n客户端（如浏览器）发起请求，服务器接收并处理请求后返回响应。HTTP 是无状态的，这意味着每个请求都是相互独立的，服务器不会记住之前的请求信息，\n这种特性使得服务器处理请求的过程更简单、高效，但在需要维护会话状态时，就需要借助额外的机制，如 Cookie 和 Session。</p>\n<h2 id=\"常见状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#常见状态码\"><span>常见状态码</span></a></h2>\n<p>HTTP 状态码由三位数字组成，用于表示请求的结果，常见的状态码分类及示例如下：</p>\n<h3 id=\"_1xx-信息性状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1xx-信息性状态码\"><span>1xx（信息性状态码）</span></a></h3>\n<p>表示请求已接收，需要继续处理。</p>\n<ul>\n<li><strong>100 Continue</strong>：客户端在发送大请求体时，先发送一个带有 <code v-pre>Expect: 100 - continue</code> 头的请求，若服务器返回此状态码，客户端就可以继续发送请求体。</li>\n</ul>\n<h3 id=\"_2xx-成功状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2xx-成功状态码\"><span>2xx（成功状态码）</span></a></h3>\n<p>表示请求已成功被服务器接收、理解并处理。</p>\n<ul>\n<li><strong>200 OK</strong>：最常见的成功状态码，表明请求成功，服务器已返回请求的资源。</li>\n<li><strong>201 Created</strong>：请求成功，并且服务器创建了新的资源，常用于 <code v-pre>POST</code> 请求创建新记录的场景。</li>\n<li><strong>204 No Content</strong>：请求处理成功，但响应中没有返回任何内容，常用于删除操作成功的响应。</li>\n</ul>\n<h3 id=\"_3xx-重定向状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3xx-重定向状态码\"><span>3xx（重定向状态码）</span></a></h3>\n<p>表示需要客户端采取进一步的操作才能完成请求，通常用于重定向到其他 URL。</p>\n<ul>\n<li><strong>301 Moved Permanently</strong>：请求的资源已永久移动到新的 URL，搜索引擎会更新索引。</li>\n<li><strong>302 Found</strong>：请求的资源临时移动到新的 URL，客户端后续仍可使用原 URL 进行请求。</li>\n<li><strong>304 Not Modified</strong>：协商缓存相关状态码，当客户端发送请求并携带缓存相关头信息时，服务器判断资源未更新，返回此状态码，客户端可使用本地缓存。</li>\n</ul>\n<h3 id=\"_4xx-客户端错误状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4xx-客户端错误状态码\"><span>4xx（客户端错误状态码）</span></a></h3>\n<p>表示客户端的请求有错误，不能被服务器所识别或处理。</p>\n<ul>\n<li><strong>400 Bad Request</strong>：客户端发送的请求语法错误，服务器无法理解，可能是请求参数格式有误。</li>\n<li><strong>401 Unauthorized</strong>：请求需要身份验证，客户端未提供有效的身份验证信息。</li>\n<li><strong>403 Forbidden</strong>：服务器理解请求，但由于权限问题拒绝执行，即使提供了有效身份验证也可能出现。</li>\n<li><strong>404 Not Found</strong>：请求的资源在服务器上不存在。</li>\n</ul>\n<h3 id=\"_5xx-服务器错误状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5xx-服务器错误状态码\"><span>5xx（服务器错误状态码）</span></a></h3>\n<p>表示服务器在处理请求时发生了错误。</p>\n<ul>\n<li><strong>500 Internal Server Error</strong>：最常见的服务器错误状态码，表明服务器内部发生错误，无法完成请求。</li>\n<li><strong>503 Service Unavailable</strong>：服务器暂时无法处理请求，可能是服务器过载或正在维护，响应头中可能包含 <code v-pre>Retry - After</code> 字段指示重试时间。</li>\n</ul>\n<h2 id=\"请求方法及区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#请求方法及区别\"><span>请求方法及区别</span></a></h2>\n<p>HTTP 定义了多种请求方法，用于不同的操作目的，常见的请求方法及区别如下：</p>\n<h3 id=\"get\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#get\"><span>GET</span></a></h3>\n<ul>\n<li><strong>用途</strong>：从服务器获取资源，请求参数通常附加在 URL 后面，形成查询字符串，如 <code v-pre>https://example.com/api/users?id=1</code>。</li>\n<li><strong>特点</strong>：请求参数会暴露在 URL 中，不安全，且 URL 长度有限制，所以不适用于传递大量数据。常用于获取数据，如获取文章列表、用户信息等。</li>\n</ul>\n<h3 id=\"post\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#post\"><span>POST</span></a></h3>\n<ul>\n<li><strong>用途</strong>：向服务器提交数据，如提交表单数据、上传文件等，数据通常放在请求体中。</li>\n<li><strong>特点</strong>：请求参数不会暴露在 URL 中，相对安全，且可以传递大量数据。常用于创建新资源，如用户注册、提交订单等。</li>\n</ul>\n","env":{"base":"/","filePath":"G:/200-Project/hoey-blog-plume/docs/notes/interview/计算机网络/HTTP 协议.md","filePathRelative":"notes/interview/计算机网络/HTTP 协议.md","frontmatter":{"title":"HTTP 协议","createTime":"2025/02/04 15:07:40","permalink":"/interview/6th9jo3q/","outline":2},"sfcBlocks":{"template":{"type":"template","content":"<template><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>HTTP 协议是？<br>\n常见的状态码有哪些？</p>\n</div>\n<hr>\n<h2 id=\"http-协议概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#http-协议概述\"><span>HTTP 协议概述</span></a></h2>\n<p>HTTP（Hypertext Transfer Protocol）即超文本传输协议，是用于在互联网上传输超文本的协议，它基于客户端 - 服务器模型工作。\n客户端（如浏览器）发起请求，服务器接收并处理请求后返回响应。HTTP 是无状态的，这意味着每个请求都是相互独立的，服务器不会记住之前的请求信息，\n这种特性使得服务器处理请求的过程更简单、高效，但在需要维护会话状态时，就需要借助额外的机制，如 Cookie 和 Session。</p>\n<h2 id=\"常见状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#常见状态码\"><span>常见状态码</span></a></h2>\n<p>HTTP 状态码由三位数字组成，用于表示请求的结果，常见的状态码分类及示例如下：</p>\n<h3 id=\"_1xx-信息性状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1xx-信息性状态码\"><span>1xx（信息性状态码）</span></a></h3>\n<p>表示请求已接收，需要继续处理。</p>\n<ul>\n<li><strong>100 Continue</strong>：客户端在发送大请求体时，先发送一个带有 <code v-pre>Expect: 100 - continue</code> 头的请求，若服务器返回此状态码，客户端就可以继续发送请求体。</li>\n</ul>\n<h3 id=\"_2xx-成功状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2xx-成功状态码\"><span>2xx（成功状态码）</span></a></h3>\n<p>表示请求已成功被服务器接收、理解并处理。</p>\n<ul>\n<li><strong>200 OK</strong>：最常见的成功状态码，表明请求成功，服务器已返回请求的资源。</li>\n<li><strong>201 Created</strong>：请求成功，并且服务器创建了新的资源，常用于 <code v-pre>POST</code> 请求创建新记录的场景。</li>\n<li><strong>204 No Content</strong>：请求处理成功，但响应中没有返回任何内容，常用于删除操作成功的响应。</li>\n</ul>\n<h3 id=\"_3xx-重定向状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3xx-重定向状态码\"><span>3xx（重定向状态码）</span></a></h3>\n<p>表示需要客户端采取进一步的操作才能完成请求，通常用于重定向到其他 URL。</p>\n<ul>\n<li><strong>301 Moved Permanently</strong>：请求的资源已永久移动到新的 URL，搜索引擎会更新索引。</li>\n<li><strong>302 Found</strong>：请求的资源临时移动到新的 URL，客户端后续仍可使用原 URL 进行请求。</li>\n<li><strong>304 Not Modified</strong>：协商缓存相关状态码，当客户端发送请求并携带缓存相关头信息时，服务器判断资源未更新，返回此状态码，客户端可使用本地缓存。</li>\n</ul>\n<h3 id=\"_4xx-客户端错误状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4xx-客户端错误状态码\"><span>4xx（客户端错误状态码）</span></a></h3>\n<p>表示客户端的请求有错误，不能被服务器所识别或处理。</p>\n<ul>\n<li><strong>400 Bad Request</strong>：客户端发送的请求语法错误，服务器无法理解，可能是请求参数格式有误。</li>\n<li><strong>401 Unauthorized</strong>：请求需要身份验证，客户端未提供有效的身份验证信息。</li>\n<li><strong>403 Forbidden</strong>：服务器理解请求，但由于权限问题拒绝执行，即使提供了有效身份验证也可能出现。</li>\n<li><strong>404 Not Found</strong>：请求的资源在服务器上不存在。</li>\n</ul>\n<h3 id=\"_5xx-服务器错误状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5xx-服务器错误状态码\"><span>5xx（服务器错误状态码）</span></a></h3>\n<p>表示服务器在处理请求时发生了错误。</p>\n<ul>\n<li><strong>500 Internal Server Error</strong>：最常见的服务器错误状态码，表明服务器内部发生错误，无法完成请求。</li>\n<li><strong>503 Service Unavailable</strong>：服务器暂时无法处理请求，可能是服务器过载或正在维护，响应头中可能包含 <code v-pre>Retry - After</code> 字段指示重试时间。</li>\n</ul>\n<h2 id=\"请求方法及区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#请求方法及区别\"><span>请求方法及区别</span></a></h2>\n<p>HTTP 定义了多种请求方法，用于不同的操作目的，常见的请求方法及区别如下：</p>\n<h3 id=\"get\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#get\"><span>GET</span></a></h3>\n<ul>\n<li><strong>用途</strong>：从服务器获取资源，请求参数通常附加在 URL 后面，形成查询字符串，如 <code v-pre>https://example.com/api/users?id=1</code>。</li>\n<li><strong>特点</strong>：请求参数会暴露在 URL 中，不安全，且 URL 长度有限制，所以不适用于传递大量数据。常用于获取数据，如获取文章列表、用户信息等。</li>\n</ul>\n<h3 id=\"post\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#post\"><span>POST</span></a></h3>\n<ul>\n<li><strong>用途</strong>：向服务器提交数据，如提交表单数据、上传文件等，数据通常放在请求体中。</li>\n<li><strong>特点</strong>：请求参数不会暴露在 URL 中，相对安全，且可以传递大量数据。常用于创建新资源，如用户注册、提交订单等。</li>\n</ul>\n</template>","contentStripped":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>HTTP 协议是？<br>\n常见的状态码有哪些？</p>\n</div>\n<hr>\n<h2 id=\"http-协议概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#http-协议概述\"><span>HTTP 协议概述</span></a></h2>\n<p>HTTP（Hypertext Transfer Protocol）即超文本传输协议，是用于在互联网上传输超文本的协议，它基于客户端 - 服务器模型工作。\n客户端（如浏览器）发起请求，服务器接收并处理请求后返回响应。HTTP 是无状态的，这意味着每个请求都是相互独立的，服务器不会记住之前的请求信息，\n这种特性使得服务器处理请求的过程更简单、高效，但在需要维护会话状态时，就需要借助额外的机制，如 Cookie 和 Session。</p>\n<h2 id=\"常见状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#常见状态码\"><span>常见状态码</span></a></h2>\n<p>HTTP 状态码由三位数字组成，用于表示请求的结果，常见的状态码分类及示例如下：</p>\n<h3 id=\"_1xx-信息性状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1xx-信息性状态码\"><span>1xx（信息性状态码）</span></a></h3>\n<p>表示请求已接收，需要继续处理。</p>\n<ul>\n<li><strong>100 Continue</strong>：客户端在发送大请求体时，先发送一个带有 <code v-pre>Expect: 100 - continue</code> 头的请求，若服务器返回此状态码，客户端就可以继续发送请求体。</li>\n</ul>\n<h3 id=\"_2xx-成功状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2xx-成功状态码\"><span>2xx（成功状态码）</span></a></h3>\n<p>表示请求已成功被服务器接收、理解并处理。</p>\n<ul>\n<li><strong>200 OK</strong>：最常见的成功状态码，表明请求成功，服务器已返回请求的资源。</li>\n<li><strong>201 Created</strong>：请求成功，并且服务器创建了新的资源，常用于 <code v-pre>POST</code> 请求创建新记录的场景。</li>\n<li><strong>204 No Content</strong>：请求处理成功，但响应中没有返回任何内容，常用于删除操作成功的响应。</li>\n</ul>\n<h3 id=\"_3xx-重定向状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3xx-重定向状态码\"><span>3xx（重定向状态码）</span></a></h3>\n<p>表示需要客户端采取进一步的操作才能完成请求，通常用于重定向到其他 URL。</p>\n<ul>\n<li><strong>301 Moved Permanently</strong>：请求的资源已永久移动到新的 URL，搜索引擎会更新索引。</li>\n<li><strong>302 Found</strong>：请求的资源临时移动到新的 URL，客户端后续仍可使用原 URL 进行请求。</li>\n<li><strong>304 Not Modified</strong>：协商缓存相关状态码，当客户端发送请求并携带缓存相关头信息时，服务器判断资源未更新，返回此状态码，客户端可使用本地缓存。</li>\n</ul>\n<h3 id=\"_4xx-客户端错误状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4xx-客户端错误状态码\"><span>4xx（客户端错误状态码）</span></a></h3>\n<p>表示客户端的请求有错误，不能被服务器所识别或处理。</p>\n<ul>\n<li><strong>400 Bad Request</strong>：客户端发送的请求语法错误，服务器无法理解，可能是请求参数格式有误。</li>\n<li><strong>401 Unauthorized</strong>：请求需要身份验证，客户端未提供有效的身份验证信息。</li>\n<li><strong>403 Forbidden</strong>：服务器理解请求，但由于权限问题拒绝执行，即使提供了有效身份验证也可能出现。</li>\n<li><strong>404 Not Found</strong>：请求的资源在服务器上不存在。</li>\n</ul>\n<h3 id=\"_5xx-服务器错误状态码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5xx-服务器错误状态码\"><span>5xx（服务器错误状态码）</span></a></h3>\n<p>表示服务器在处理请求时发生了错误。</p>\n<ul>\n<li><strong>500 Internal Server Error</strong>：最常见的服务器错误状态码，表明服务器内部发生错误，无法完成请求。</li>\n<li><strong>503 Service Unavailable</strong>：服务器暂时无法处理请求，可能是服务器过载或正在维护，响应头中可能包含 <code v-pre>Retry - After</code> 字段指示重试时间。</li>\n</ul>\n<h2 id=\"请求方法及区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#请求方法及区别\"><span>请求方法及区别</span></a></h2>\n<p>HTTP 定义了多种请求方法，用于不同的操作目的，常见的请求方法及区别如下：</p>\n<h3 id=\"get\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#get\"><span>GET</span></a></h3>\n<ul>\n<li><strong>用途</strong>：从服务器获取资源，请求参数通常附加在 URL 后面，形成查询字符串，如 <code v-pre>https://example.com/api/users?id=1</code>。</li>\n<li><strong>特点</strong>：请求参数会暴露在 URL 中，不安全，且 URL 长度有限制，所以不适用于传递大量数据。常用于获取数据，如获取文章列表、用户信息等。</li>\n</ul>\n<h3 id=\"post\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#post\"><span>POST</span></a></h3>\n<ul>\n<li><strong>用途</strong>：向服务器提交数据，如提交表单数据、上传文件等，数据通常放在请求体中。</li>\n<li><strong>特点</strong>：请求参数不会暴露在 URL 中，相对安全，且可以传递大量数据。常用于创建新资源，如用户注册、提交订单等。</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"::: tip 问题\nHTTP 协议是？   \n常见的状态码有哪些？\n:::\n\n---\n\n## HTTP 协议概述\nHTTP（Hypertext Transfer Protocol）即超文本传输协议，是用于在互联网上传输超文本的协议，它基于客户端 - 服务器模型工作。\n客户端（如浏览器）发起请求，服务器接收并处理请求后返回响应。HTTP 是无状态的，这意味着每个请求都是相互独立的，服务器不会记住之前的请求信息，\n这种特性使得服务器处理请求的过程更简单、高效，但在需要维护会话状态时，就需要借助额外的机制，如 Cookie 和 Session。\n\n## 常见状态码\nHTTP 状态码由三位数字组成，用于表示请求的结果，常见的状态码分类及示例如下：\n\n### 1xx（信息性状态码）\n表示请求已接收，需要继续处理。\n- **100 Continue**：客户端在发送大请求体时，先发送一个带有 `Expect: 100 - continue` 头的请求，若服务器返回此状态码，客户端就可以继续发送请求体。\n\n### 2xx（成功状态码）\n表示请求已成功被服务器接收、理解并处理。\n- **200 OK**：最常见的成功状态码，表明请求成功，服务器已返回请求的资源。\n- **201 Created**：请求成功，并且服务器创建了新的资源，常用于 `POST` 请求创建新记录的场景。\n- **204 No Content**：请求处理成功，但响应中没有返回任何内容，常用于删除操作成功的响应。\n\n### 3xx（重定向状态码）\n表示需要客户端采取进一步的操作才能完成请求，通常用于重定向到其他 URL。\n- **301 Moved Permanently**：请求的资源已永久移动到新的 URL，搜索引擎会更新索引。\n- **302 Found**：请求的资源临时移动到新的 URL，客户端后续仍可使用原 URL 进行请求。\n- **304 Not Modified**：协商缓存相关状态码，当客户端发送请求并携带缓存相关头信息时，服务器判断资源未更新，返回此状态码，客户端可使用本地缓存。\n\n### 4xx（客户端错误状态码）\n表示客户端的请求有错误，不能被服务器所识别或处理。\n- **400 Bad Request**：客户端发送的请求语法错误，服务器无法理解，可能是请求参数格式有误。\n- **401 Unauthorized**：请求需要身份验证，客户端未提供有效的身份验证信息。\n- **403 Forbidden**：服务器理解请求，但由于权限问题拒绝执行，即使提供了有效身份验证也可能出现。\n- **404 Not Found**：请求的资源在服务器上不存在。\n\n### 5xx（服务器错误状态码）\n表示服务器在处理请求时发生了错误。\n- **500 Internal Server Error**：最常见的服务器错误状态码，表明服务器内部发生错误，无法完成请求。\n- **503 Service Unavailable**：服务器暂时无法处理请求，可能是服务器过载或正在维护，响应头中可能包含 `Retry - After` 字段指示重试时间。\n\n## 请求方法及区别\nHTTP 定义了多种请求方法，用于不同的操作目的，常见的请求方法及区别如下：\n\n### GET\n- **用途**：从服务器获取资源，请求参数通常附加在 URL 后面，形成查询字符串，如 `https://example.com/api/users?id=1`。\n- **特点**：请求参数会暴露在 URL 中，不安全，且 URL 长度有限制，所以不适用于传递大量数据。常用于获取数据，如获取文章列表、用户信息等。\n\n### POST\n- **用途**：向服务器提交数据，如提交表单数据、上传文件等，数据通常放在请求体中。\n- **特点**：请求参数不会暴露在 URL 中，相对安全，且可以传递大量数据。常用于创建新资源，如用户注册、提交订单等。","excerpt":"","includedFiles":[],"tasklists":0,"title":"","headers":[{"level":2,"title":"HTTP 协议概述","slug":"http-协议概述","link":"#http-协议概述","children":[]},{"level":2,"title":"常见状态码","slug":"常见状态码","link":"#常见状态码","children":[{"level":3,"title":"1xx（信息性状态码）","slug":"_1xx-信息性状态码","link":"#_1xx-信息性状态码","children":[]},{"level":3,"title":"2xx（成功状态码）","slug":"_2xx-成功状态码","link":"#_2xx-成功状态码","children":[]},{"level":3,"title":"3xx（重定向状态码）","slug":"_3xx-重定向状态码","link":"#_3xx-重定向状态码","children":[]},{"level":3,"title":"4xx（客户端错误状态码）","slug":"_4xx-客户端错误状态码","link":"#_4xx-客户端错误状态码","children":[]},{"level":3,"title":"5xx（服务器错误状态码）","slug":"_5xx-服务器错误状态码","link":"#_5xx-服务器错误状态码","children":[]}]},{"level":2,"title":"请求方法及区别","slug":"请求方法及区别","link":"#请求方法及区别","children":[{"level":3,"title":"GET","slug":"get","link":"#get","children":[]},{"level":3,"title":"POST","slug":"post","link":"#post","children":[]}]}]}}
