{"content":"<p>在 <code v-pre>webstorm</code> 中导入部分组件时 <code v-pre>IDE爆红</code>，运行正常，但会导致构建错误的解决办法。</p>\n<!-- more -->  \n<p>在使用 <code v-pre>webstorm</code> 开发 Vue3 + TS 项目时，编辑器一直有一个报错，因为不影响运行，所以就一直没在意，但有天准备部署到 <code v-pre>netlify</code>\n时在 <code v-pre>build</code> 阶段出现错误，查看日志之后发现是 <strong>找不到 .vue 的声明文件</strong> 的错误，同时错误位置指向\n<code v-pre>import SearchInput from &quot;@/components/SearchInputResult.vue&quot;</code> ，随后尝试在 IDE 构建时也出现了相同的错误。</p>\n<p><img src=\"/assets/24121401_01.png\" alt=\"24121401_01.png\"></p>\n<p>最终找到错误原因为在 <code v-pre>.d.ts</code> 中缺少了对 <code v-pre>*.vue</code> 的 声明，解决办法是在 <code v-pre>env.d.ts</code> 加入以下代码：</p>\n<div class=\"language-ts\" data-highlighter=\"shiki\" data-ext=\"ts\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">declare</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> module</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">*.vue</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    import</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> ComponentOptions</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> from</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">vue</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">comp</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">: </span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">ComponentOptions</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    export</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> comp</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这段代码是一个 TypeScript 的模块声明文件（通常以 <code v-pre>.d.ts</code> 扩展名保存），\n用于告诉 <code v-pre>TypeScript</code> 编译器如何处理以 <code v-pre>.vue</code> 为后缀的模块导入。在使用 <code v-pre>Vue.js</code> 进行项目开发，\n尤其是结合 <code v-pre>TypeScript</code> 时，<code v-pre>Vue</code> 单文件组件（<code v-pre>.vue</code> 文件）需要有相应的类型定义，\n以便 <code v-pre>TypeScript</code> 能够正确理解其结构和类型，这段声明就是起到这样的作用。但为什么导入其他组件没有出现这样的错误？我还没有找到原因所在。</p>\n","env":{"base":"/","filePath":"G:/200-Project/hoey-blog-plume/docs/技文/24121401.md","filePathRelative":"技文/24121401.md","frontmatter":{"title":"vue3部分组件导入时爆红(Vue3+Ts)","createTime":"2024/12/14","tags":["DeBug","Vue"],"permalink":"/article/24121401/"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>在 <code v-pre>webstorm</code> 中导入部分组件时 <code v-pre>IDE爆红</code>，运行正常，但会导致构建错误的解决办法。</p>\n<!-- more -->  \n<p>在使用 <code v-pre>webstorm</code> 开发 Vue3 + TS 项目时，编辑器一直有一个报错，因为不影响运行，所以就一直没在意，但有天准备部署到 <code v-pre>netlify</code>\n时在 <code v-pre>build</code> 阶段出现错误，查看日志之后发现是 <strong>找不到 .vue 的声明文件</strong> 的错误，同时错误位置指向\n<code v-pre>import SearchInput from &quot;@/components/SearchInputResult.vue&quot;</code> ，随后尝试在 IDE 构建时也出现了相同的错误。</p>\n<p><img src=\"/assets/24121401_01.png\" alt=\"24121401_01.png\"></p>\n<p>最终找到错误原因为在 <code v-pre>.d.ts</code> 中缺少了对 <code v-pre>*.vue</code> 的 声明，解决办法是在 <code v-pre>env.d.ts</code> 加入以下代码：</p>\n<div class=\"language-ts\" data-highlighter=\"shiki\" data-ext=\"ts\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">declare</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> module</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">*.vue</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    import</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> ComponentOptions</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> from</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">vue</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">comp</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">: </span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">ComponentOptions</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    export</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> comp</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这段代码是一个 TypeScript 的模块声明文件（通常以 <code v-pre>.d.ts</code> 扩展名保存），\n用于告诉 <code v-pre>TypeScript</code> 编译器如何处理以 <code v-pre>.vue</code> 为后缀的模块导入。在使用 <code v-pre>Vue.js</code> 进行项目开发，\n尤其是结合 <code v-pre>TypeScript</code> 时，<code v-pre>Vue</code> 单文件组件（<code v-pre>.vue</code> 文件）需要有相应的类型定义，\n以便 <code v-pre>TypeScript</code> 能够正确理解其结构和类型，这段声明就是起到这样的作用。但为什么导入其他组件没有出现这样的错误？我还没有找到原因所在。</p>\n</template>","contentStripped":"<p>在 <code v-pre>webstorm</code> 中导入部分组件时 <code v-pre>IDE爆红</code>，运行正常，但会导致构建错误的解决办法。</p>\n<!-- more -->  \n<p>在使用 <code v-pre>webstorm</code> 开发 Vue3 + TS 项目时，编辑器一直有一个报错，因为不影响运行，所以就一直没在意，但有天准备部署到 <code v-pre>netlify</code>\n时在 <code v-pre>build</code> 阶段出现错误，查看日志之后发现是 <strong>找不到 .vue 的声明文件</strong> 的错误，同时错误位置指向\n<code v-pre>import SearchInput from &quot;@/components/SearchInputResult.vue&quot;</code> ，随后尝试在 IDE 构建时也出现了相同的错误。</p>\n<p><img src=\"/assets/24121401_01.png\" alt=\"24121401_01.png\"></p>\n<p>最终找到错误原因为在 <code v-pre>.d.ts</code> 中缺少了对 <code v-pre>*.vue</code> 的 声明，解决办法是在 <code v-pre>env.d.ts</code> 加入以下代码：</p>\n<div class=\"language-ts\" data-highlighter=\"shiki\" data-ext=\"ts\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">declare</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> module</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">*.vue</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    import</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> ComponentOptions</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> from</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">vue</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">comp</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">: </span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">ComponentOptions</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    export</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> comp</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这段代码是一个 TypeScript 的模块声明文件（通常以 <code v-pre>.d.ts</code> 扩展名保存），\n用于告诉 <code v-pre>TypeScript</code> 编译器如何处理以 <code v-pre>.vue</code> 为后缀的模块导入。在使用 <code v-pre>Vue.js</code> 进行项目开发，\n尤其是结合 <code v-pre>TypeScript</code> 时，<code v-pre>Vue</code> 单文件组件（<code v-pre>.vue</code> 文件）需要有相应的类型定义，\n以便 <code v-pre>TypeScript</code> 能够正确理解其结构和类型，这段声明就是起到这样的作用。但为什么导入其他组件没有出现这样的错误？我还没有找到原因所在。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"在 `webstorm` 中导入部分组件时 `IDE爆红`，运行正常，但会导致构建错误的解决办法。\r\n<!-- more -->  \r\n\r\n在使用 `webstorm` 开发 Vue3 + TS 项目时，编辑器一直有一个报错，因为不影响运行，所以就一直没在意，但有天准备部署到 `netlify`\r\n时在 `build` 阶段出现错误，查看日志之后发现是 **找不到 .vue 的声明文件** 的错误，同时错误位置指向\r\n`import SearchInput from \"@/components/SearchInputResult.vue\"` ，随后尝试在 IDE 构建时也出现了相同的错误。\r\n\r\n![24121401_01.png](/assets/24121401_01.png)\r\n\r\n最终找到错误原因为在 `.d.ts` 中缺少了对 `*.vue` 的 声明，解决办法是在 `env.d.ts` 加入以下代码：\r\n```ts\r\ndeclare module '*.vue' {\r\n    import type { ComponentOptions } from 'vue'\r\n    const comp: ComponentOptions\r\n    export default comp\r\n}\r\n```\r\n这段代码是一个 TypeScript 的模块声明文件（通常以 `.d.ts` 扩展名保存），\r\n用于告诉 `TypeScript` 编译器如何处理以 `.vue` 为后缀的模块导入。在使用 `Vue.js` 进行项目开发，\r\n尤其是结合 `TypeScript` 时，`Vue` 单文件组件（`.vue` 文件）需要有相应的类型定义，\r\n以便 `TypeScript` 能够正确理解其结构和类型，这段声明就是起到这样的作用。但为什么导入其他组件没有出现这样的错误？我还没有找到原因所在。","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[]}}
