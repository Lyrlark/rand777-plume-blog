{"content":"<h2 id=\"_1-初始化版本库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-初始化版本库\"><span>1. 初始化版本库</span></a></h2>\n<h3 id=\"功能概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述\"><span>功能概述</span></a></h3>\n<p><code v-pre>git init</code> 命令用于在本地目录中创建一个新的 Git 版本库。当你开始一个新的项目或者想要对现有的项目进行版本控制时，就可以使用该命令来初始化一个 Git 仓库。</p>\n<h3 id=\"操作步骤\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#操作步骤\"><span>操作步骤</span></a></h3>\n<p>首先，打开终端（在 Windows 系统中可以使用 Git Bash，在 macOS 和 Linux 系统中可以使用自带的终端应用），然后导航到你想要创建版本库的目录。例如，我们要在 <code v-pre>~/Projects/my-project</code> 目录下创建一个新的 Git 版本库，可以执行以下命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">cd</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> ~/Projects/my-project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> init</span></span></code></pre>\n\n</div><p>执行 <code v-pre>git init</code> 命令后，Git 会在当前目录下创建一个名为 <code v-pre>.git</code> 的<strong>隐藏目录</strong>，该目录包含了 Git 版本库的所有元数据和配置信息。</p>\n<h3 id=\"查看初始化结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看初始化结果\"><span>查看初始化结果</span></a></h3>\n<p>你可以使用 <code v-pre>ls -a</code> 命令查看当前目录下的所有文件和文件夹，确认 <code v-pre>.git</code> 目录是否已经创建：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">ls</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span></span></code></pre>\n\n</div><h2 id=\"_2-添加文件到暂存区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-添加文件到暂存区\"><span>2. 添加文件到暂存区</span></a></h2>\n<h3 id=\"功能概述-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-1\"><span>功能概述</span></a></h3>\n<p>在 Git 中，文件的修改需要先添加到暂存区，然后才能提交到版本库。<code v-pre>git add</code> 命令用于将文件的修改添加到暂存区。</p>\n<h3 id=\"常用用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#常用用法\"><span>常用用法</span></a></h3>\n<ul>\n<li><strong>添加单个文件</strong>：如果你只需要添加一个文件到暂存区，可以使用以下命令：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> filename.txt</span></span></code></pre>\n\n</div><p>这里的 <code v-pre>filename.txt</code> 是你要添加的文件的名称。</p>\n<ul>\n<li><strong>添加多个文件</strong>：如果要添加多个文件，可以在 <code v-pre>git add</code> 命令后面依次列出这些文件的名称，用<strong>空格分隔</strong>：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> file1.txt</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> file2.txt</span></span></code></pre>\n\n</div><ul>\n<li><strong>添加整个目录</strong>：如果你想将某个目录下的所有文件和子目录的修改都添加到暂存区，可以使用以下命令：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> directory/</span></span></code></pre>\n\n</div><p>其中 <code v-pre>directory/</code> 是你要添加的目录的名称。</p>\n<ul>\n<li><strong>添加所有修改</strong>：使用 <code v-pre>.</code> 或 <code v-pre>--all</code> 选项可以将当前目录下的所有文件的修改都添加到暂存区：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> .</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> --all</span></span></code></pre>\n\n</div><h3 id=\"查看暂存区状态\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看暂存区状态\"><span>查看暂存区状态</span></a></h3>\n<p>使用 <code v-pre>git status</code> 命令可以查看当前工作目录和暂存区的状态，确认哪些文件已经添加到暂存区，哪些文件还未添加：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> status</span></span></code></pre>\n\n</div><h2 id=\"_3-提交暂存区的修改\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-提交暂存区的修改\"><span>3. 提交暂存区的修改</span></a></h2>\n<h3 id=\"功能概述-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-2\"><span>功能概述</span></a></h3>\n<p><code v-pre>git commit</code> 命令用于将暂存区的修改提交到本地版本库。每次提交都会生成一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。</p>\n<h3 id=\"基本用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法\"><span>基本用法</span></a></h3>\n<p>提交暂存区的修改时，需要使用 <code v-pre>-m</code> 选项指定提交信息，该信息用于描述本次提交所做的更改：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Initial commit</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><p>这里的 <code v-pre>&quot;Initial commit&quot;</code> 是提交信息，你可以根据实际情况修改该信息，使其更准确地描述本次提交的内容。</p>\n<h3 id=\"详细提交信息\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#详细提交信息\"><span>详细提交信息</span></a></h3>\n<p>如果提交信息比较复杂，可以不使用 <code v-pre>-m</code> 选项，直接执行 <code v-pre>git commit</code> 命令。Git 会打开一个文本编辑器（如 Vim 或 Nano），让你输入详细的提交信息。在编辑器中输入提交信息后，保存并退出编辑器，即可完成提交。</p>\n<h3 id=\"跳过暂存区直接提交\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#跳过暂存区直接提交\"><span>跳过暂存区直接提交</span></a></h3>\n<p>如果你只想提交某些文件的修改，并且不想将这些修改先添加到暂存区，可以使用 <code v-pre>-a</code> 选项：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Update some files</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><p>使用 <code v-pre>-a</code> 选项时，Git 会自动将所有已跟踪文件的修改添加到暂存区并提交，但不会处理未跟踪的文件。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>为提高代码提交信息的可读性、协作效率和版本管理质量，你应该遵循 <RouteLink to=\"/notes/patch/Git/%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.html\">commit 的提交规范</RouteLink></p>\n</div>\n<h2 id=\"_4-查看提交历史\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-查看提交历史\"><span>4. 查看提交历史</span></a></h2>\n<h3 id=\"功能概述-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-3\"><span>功能概述</span></a></h3>\n<p><code v-pre>git log</code> 命令用于查看版本库的提交历史，包括每个提交的哈希值、作者、提交时间和提交信息等。</p>\n<h3 id=\"基本用法-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法-1\"><span>基本用法</span></a></h3>\n<p>执行 <code v-pre>git log</code> 命令可以查看完整的提交历史：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span></span></code></pre>\n\n</div><p>输出结果会按照时间顺序倒序排列，<strong>最新的提交在最上面</strong>。</p>\n<h3 id=\"简化输出\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简化输出\"><span>简化输出</span></a></h3>\n<p>如果提交历史很长，你可能只需要查看一些关键信息，可以使用 <code v-pre>--oneline</code> 选项简化输出：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> --oneline</span></span></code></pre>\n\n</div><p>该选项会将每个提交的信息压缩到一行，<strong>只显示提交的哈希值和提交信息的前几个字符</strong>。</p>\n<h3 id=\"查看指定数量的提交\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看指定数量的提交\"><span>查看指定数量的提交</span></a></h3>\n<p>使用 <code v-pre>-n</code> 选项可以指定查看的提交数量，例如查看最近的 3 个提交：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -n</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 3</span></span></code></pre>\n\n</div><p>通过以上步骤，可以使用 <code v-pre>Git</code> 完成版本库的创建，从初始化版本库到添加文件、暂存更改、提交版本，并查看提交历史。</p>\n","env":{"base":"/","filePath":"G:/200-Project/hoey-blog-plume/docs/notes/patch/Git/2.创建版本库.md","filePathRelative":"notes/patch/Git/2.创建版本库.md","frontmatter":{"title":"创建版本库","createTime":"2025/03/12 17:13:47","permalink":"/patch/git/yeneb1rg/"},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"_1-初始化版本库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-初始化版本库\"><span>1. 初始化版本库</span></a></h2>\n<h3 id=\"功能概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述\"><span>功能概述</span></a></h3>\n<p><code v-pre>git init</code> 命令用于在本地目录中创建一个新的 Git 版本库。当你开始一个新的项目或者想要对现有的项目进行版本控制时，就可以使用该命令来初始化一个 Git 仓库。</p>\n<h3 id=\"操作步骤\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#操作步骤\"><span>操作步骤</span></a></h3>\n<p>首先，打开终端（在 Windows 系统中可以使用 Git Bash，在 macOS 和 Linux 系统中可以使用自带的终端应用），然后导航到你想要创建版本库的目录。例如，我们要在 <code v-pre>~/Projects/my-project</code> 目录下创建一个新的 Git 版本库，可以执行以下命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">cd</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> ~/Projects/my-project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> init</span></span></code></pre>\n\n</div><p>执行 <code v-pre>git init</code> 命令后，Git 会在当前目录下创建一个名为 <code v-pre>.git</code> 的<strong>隐藏目录</strong>，该目录包含了 Git 版本库的所有元数据和配置信息。</p>\n<h3 id=\"查看初始化结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看初始化结果\"><span>查看初始化结果</span></a></h3>\n<p>你可以使用 <code v-pre>ls -a</code> 命令查看当前目录下的所有文件和文件夹，确认 <code v-pre>.git</code> 目录是否已经创建：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">ls</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span></span></code></pre>\n\n</div><h2 id=\"_2-添加文件到暂存区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-添加文件到暂存区\"><span>2. 添加文件到暂存区</span></a></h2>\n<h3 id=\"功能概述-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-1\"><span>功能概述</span></a></h3>\n<p>在 Git 中，文件的修改需要先添加到暂存区，然后才能提交到版本库。<code v-pre>git add</code> 命令用于将文件的修改添加到暂存区。</p>\n<h3 id=\"常用用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#常用用法\"><span>常用用法</span></a></h3>\n<ul>\n<li><strong>添加单个文件</strong>：如果你只需要添加一个文件到暂存区，可以使用以下命令：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> filename.txt</span></span></code></pre>\n\n</div><p>这里的 <code v-pre>filename.txt</code> 是你要添加的文件的名称。</p>\n<ul>\n<li><strong>添加多个文件</strong>：如果要添加多个文件，可以在 <code v-pre>git add</code> 命令后面依次列出这些文件的名称，用<strong>空格分隔</strong>：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> file1.txt</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> file2.txt</span></span></code></pre>\n\n</div><ul>\n<li><strong>添加整个目录</strong>：如果你想将某个目录下的所有文件和子目录的修改都添加到暂存区，可以使用以下命令：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> directory/</span></span></code></pre>\n\n</div><p>其中 <code v-pre>directory/</code> 是你要添加的目录的名称。</p>\n<ul>\n<li><strong>添加所有修改</strong>：使用 <code v-pre>.</code> 或 <code v-pre>--all</code> 选项可以将当前目录下的所有文件的修改都添加到暂存区：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> .</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> --all</span></span></code></pre>\n\n</div><h3 id=\"查看暂存区状态\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看暂存区状态\"><span>查看暂存区状态</span></a></h3>\n<p>使用 <code v-pre>git status</code> 命令可以查看当前工作目录和暂存区的状态，确认哪些文件已经添加到暂存区，哪些文件还未添加：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> status</span></span></code></pre>\n\n</div><h2 id=\"_3-提交暂存区的修改\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-提交暂存区的修改\"><span>3. 提交暂存区的修改</span></a></h2>\n<h3 id=\"功能概述-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-2\"><span>功能概述</span></a></h3>\n<p><code v-pre>git commit</code> 命令用于将暂存区的修改提交到本地版本库。每次提交都会生成一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。</p>\n<h3 id=\"基本用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法\"><span>基本用法</span></a></h3>\n<p>提交暂存区的修改时，需要使用 <code v-pre>-m</code> 选项指定提交信息，该信息用于描述本次提交所做的更改：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Initial commit</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><p>这里的 <code v-pre>&quot;Initial commit&quot;</code> 是提交信息，你可以根据实际情况修改该信息，使其更准确地描述本次提交的内容。</p>\n<h3 id=\"详细提交信息\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#详细提交信息\"><span>详细提交信息</span></a></h3>\n<p>如果提交信息比较复杂，可以不使用 <code v-pre>-m</code> 选项，直接执行 <code v-pre>git commit</code> 命令。Git 会打开一个文本编辑器（如 Vim 或 Nano），让你输入详细的提交信息。在编辑器中输入提交信息后，保存并退出编辑器，即可完成提交。</p>\n<h3 id=\"跳过暂存区直接提交\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#跳过暂存区直接提交\"><span>跳过暂存区直接提交</span></a></h3>\n<p>如果你只想提交某些文件的修改，并且不想将这些修改先添加到暂存区，可以使用 <code v-pre>-a</code> 选项：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Update some files</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><p>使用 <code v-pre>-a</code> 选项时，Git 会自动将所有已跟踪文件的修改添加到暂存区并提交，但不会处理未跟踪的文件。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>为提高代码提交信息的可读性、协作效率和版本管理质量，你应该遵循 <RouteLink to=\"/notes/patch/Git/%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.html\">commit 的提交规范</RouteLink></p>\n</div>\n<h2 id=\"_4-查看提交历史\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-查看提交历史\"><span>4. 查看提交历史</span></a></h2>\n<h3 id=\"功能概述-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-3\"><span>功能概述</span></a></h3>\n<p><code v-pre>git log</code> 命令用于查看版本库的提交历史，包括每个提交的哈希值、作者、提交时间和提交信息等。</p>\n<h3 id=\"基本用法-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法-1\"><span>基本用法</span></a></h3>\n<p>执行 <code v-pre>git log</code> 命令可以查看完整的提交历史：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span></span></code></pre>\n\n</div><p>输出结果会按照时间顺序倒序排列，<strong>最新的提交在最上面</strong>。</p>\n<h3 id=\"简化输出\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简化输出\"><span>简化输出</span></a></h3>\n<p>如果提交历史很长，你可能只需要查看一些关键信息，可以使用 <code v-pre>--oneline</code> 选项简化输出：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> --oneline</span></span></code></pre>\n\n</div><p>该选项会将每个提交的信息压缩到一行，<strong>只显示提交的哈希值和提交信息的前几个字符</strong>。</p>\n<h3 id=\"查看指定数量的提交\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看指定数量的提交\"><span>查看指定数量的提交</span></a></h3>\n<p>使用 <code v-pre>-n</code> 选项可以指定查看的提交数量，例如查看最近的 3 个提交：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -n</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 3</span></span></code></pre>\n\n</div><p>通过以上步骤，可以使用 <code v-pre>Git</code> 完成版本库的创建，从初始化版本库到添加文件、暂存更改、提交版本，并查看提交历史。</p>\n</template>","contentStripped":"<h2 id=\"_1-初始化版本库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-初始化版本库\"><span>1. 初始化版本库</span></a></h2>\n<h3 id=\"功能概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述\"><span>功能概述</span></a></h3>\n<p><code v-pre>git init</code> 命令用于在本地目录中创建一个新的 Git 版本库。当你开始一个新的项目或者想要对现有的项目进行版本控制时，就可以使用该命令来初始化一个 Git 仓库。</p>\n<h3 id=\"操作步骤\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#操作步骤\"><span>操作步骤</span></a></h3>\n<p>首先，打开终端（在 Windows 系统中可以使用 Git Bash，在 macOS 和 Linux 系统中可以使用自带的终端应用），然后导航到你想要创建版本库的目录。例如，我们要在 <code v-pre>~/Projects/my-project</code> 目录下创建一个新的 Git 版本库，可以执行以下命令：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">cd</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> ~/Projects/my-project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> init</span></span></code></pre>\n\n</div><p>执行 <code v-pre>git init</code> 命令后，Git 会在当前目录下创建一个名为 <code v-pre>.git</code> 的<strong>隐藏目录</strong>，该目录包含了 Git 版本库的所有元数据和配置信息。</p>\n<h3 id=\"查看初始化结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看初始化结果\"><span>查看初始化结果</span></a></h3>\n<p>你可以使用 <code v-pre>ls -a</code> 命令查看当前目录下的所有文件和文件夹，确认 <code v-pre>.git</code> 目录是否已经创建：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">ls</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span></span></code></pre>\n\n</div><h2 id=\"_2-添加文件到暂存区\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-添加文件到暂存区\"><span>2. 添加文件到暂存区</span></a></h2>\n<h3 id=\"功能概述-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-1\"><span>功能概述</span></a></h3>\n<p>在 Git 中，文件的修改需要先添加到暂存区，然后才能提交到版本库。<code v-pre>git add</code> 命令用于将文件的修改添加到暂存区。</p>\n<h3 id=\"常用用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#常用用法\"><span>常用用法</span></a></h3>\n<ul>\n<li><strong>添加单个文件</strong>：如果你只需要添加一个文件到暂存区，可以使用以下命令：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> filename.txt</span></span></code></pre>\n\n</div><p>这里的 <code v-pre>filename.txt</code> 是你要添加的文件的名称。</p>\n<ul>\n<li><strong>添加多个文件</strong>：如果要添加多个文件，可以在 <code v-pre>git add</code> 命令后面依次列出这些文件的名称，用<strong>空格分隔</strong>：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> file1.txt</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> file2.txt</span></span></code></pre>\n\n</div><ul>\n<li><strong>添加整个目录</strong>：如果你想将某个目录下的所有文件和子目录的修改都添加到暂存区，可以使用以下命令：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> directory/</span></span></code></pre>\n\n</div><p>其中 <code v-pre>directory/</code> 是你要添加的目录的名称。</p>\n<ul>\n<li><strong>添加所有修改</strong>：使用 <code v-pre>.</code> 或 <code v-pre>--all</code> 选项可以将当前目录下的所有文件的修改都添加到暂存区：</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> .</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> add</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> --all</span></span></code></pre>\n\n</div><h3 id=\"查看暂存区状态\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看暂存区状态\"><span>查看暂存区状态</span></a></h3>\n<p>使用 <code v-pre>git status</code> 命令可以查看当前工作目录和暂存区的状态，确认哪些文件已经添加到暂存区，哪些文件还未添加：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> status</span></span></code></pre>\n\n</div><h2 id=\"_3-提交暂存区的修改\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-提交暂存区的修改\"><span>3. 提交暂存区的修改</span></a></h2>\n<h3 id=\"功能概述-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-2\"><span>功能概述</span></a></h3>\n<p><code v-pre>git commit</code> 命令用于将暂存区的修改提交到本地版本库。每次提交都会生成一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。</p>\n<h3 id=\"基本用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法\"><span>基本用法</span></a></h3>\n<p>提交暂存区的修改时，需要使用 <code v-pre>-m</code> 选项指定提交信息，该信息用于描述本次提交所做的更改：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Initial commit</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><p>这里的 <code v-pre>&quot;Initial commit&quot;</code> 是提交信息，你可以根据实际情况修改该信息，使其更准确地描述本次提交的内容。</p>\n<h3 id=\"详细提交信息\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#详细提交信息\"><span>详细提交信息</span></a></h3>\n<p>如果提交信息比较复杂，可以不使用 <code v-pre>-m</code> 选项，直接执行 <code v-pre>git commit</code> 命令。Git 会打开一个文本编辑器（如 Vim 或 Nano），让你输入详细的提交信息。在编辑器中输入提交信息后，保存并退出编辑器，即可完成提交。</p>\n<h3 id=\"跳过暂存区直接提交\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#跳过暂存区直接提交\"><span>跳过暂存区直接提交</span></a></h3>\n<p>如果你只想提交某些文件的修改，并且不想将这些修改先添加到暂存区，可以使用 <code v-pre>-a</code> 选项：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> commit</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -a</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -m</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Update some files</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span></span></code></pre>\n\n</div><p>使用 <code v-pre>-a</code> 选项时，Git 会自动将所有已跟踪文件的修改添加到暂存区并提交，但不会处理未跟踪的文件。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>为提高代码提交信息的可读性、协作效率和版本管理质量，你应该遵循 <RouteLink to=\"/notes/patch/Git/%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.html\">commit 的提交规范</RouteLink></p>\n</div>\n<h2 id=\"_4-查看提交历史\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-查看提交历史\"><span>4. 查看提交历史</span></a></h2>\n<h3 id=\"功能概述-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能概述-3\"><span>功能概述</span></a></h3>\n<p><code v-pre>git log</code> 命令用于查看版本库的提交历史，包括每个提交的哈希值、作者、提交时间和提交信息等。</p>\n<h3 id=\"基本用法-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法-1\"><span>基本用法</span></a></h3>\n<p>执行 <code v-pre>git log</code> 命令可以查看完整的提交历史：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span></span></code></pre>\n\n</div><p>输出结果会按照时间顺序倒序排列，<strong>最新的提交在最上面</strong>。</p>\n<h3 id=\"简化输出\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简化输出\"><span>简化输出</span></a></h3>\n<p>如果提交历史很长，你可能只需要查看一些关键信息，可以使用 <code v-pre>--oneline</code> 选项简化输出：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> --oneline</span></span></code></pre>\n\n</div><p>该选项会将每个提交的信息压缩到一行，<strong>只显示提交的哈希值和提交信息的前几个字符</strong>。</p>\n<h3 id=\"查看指定数量的提交\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看指定数量的提交\"><span>查看指定数量的提交</span></a></h3>\n<p>使用 <code v-pre>-n</code> 选项可以指定查看的提交数量，例如查看最近的 3 个提交：</p>\n<div class=\"language-bash\" data-ext=\"bash\" data-title=\"bash\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">git</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> log</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -n</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 3</span></span></code></pre>\n\n</div><p>通过以上步骤，可以使用 <code v-pre>Git</code> 完成版本库的创建，从初始化版本库到添加文件、暂存更改、提交版本，并查看提交历史。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"## 1. 初始化版本库\n### 功能概述\n`git init` 命令用于在本地目录中创建一个新的 Git 版本库。当你开始一个新的项目或者想要对现有的项目进行版本控制时，就可以使用该命令来初始化一个 Git 仓库。\n\n### 操作步骤\n首先，打开终端（在 Windows 系统中可以使用 Git Bash，在 macOS 和 Linux 系统中可以使用自带的终端应用），然后导航到你想要创建版本库的目录。例如，我们要在 `~/Projects/my-project` 目录下创建一个新的 Git 版本库，可以执行以下命令：\n```bash\ncd ~/Projects/my-project\ngit init\n```\n执行 `git init` 命令后，Git 会在当前目录下创建一个名为 `.git` 的**隐藏目录**，该目录包含了 Git 版本库的所有元数据和配置信息。\n\n### 查看初始化结果\n你可以使用 `ls -a` 命令查看当前目录下的所有文件和文件夹，确认 `.git` 目录是否已经创建：\n```bash\nls -a\n```\n\n## 2. 添加文件到暂存区\n### 功能概述\n在 Git 中，文件的修改需要先添加到暂存区，然后才能提交到版本库。`git add` 命令用于将文件的修改添加到暂存区。\n\n### 常用用法\n- **添加单个文件**：如果你只需要添加一个文件到暂存区，可以使用以下命令：\n```bash\ngit add filename.txt\n```\n这里的 `filename.txt` 是你要添加的文件的名称。\n\n- **添加多个文件**：如果要添加多个文件，可以在 `git add` 命令后面依次列出这些文件的名称，用**空格分隔**：\n```bash\ngit add file1.txt file2.txt\n```\n\n- **添加整个目录**：如果你想将某个目录下的所有文件和子目录的修改都添加到暂存区，可以使用以下命令：\n```bash\ngit add directory/\n```\n其中 `directory/` 是你要添加的目录的名称。\n\n- **添加所有修改**：使用 `.` 或 `--all` 选项可以将当前目录下的所有文件的修改都添加到暂存区：\n```bash\ngit add .\n# 或者\ngit add --all\n```\n\n### 查看暂存区状态\n使用 `git status` 命令可以查看当前工作目录和暂存区的状态，确认哪些文件已经添加到暂存区，哪些文件还未添加：\n```bash\ngit status\n```\n\n## 3. 提交暂存区的修改\n### 功能概述\n`git commit` 命令用于将暂存区的修改提交到本地版本库。每次提交都会生成一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。\n\n### 基本用法\n提交暂存区的修改时，需要使用 `-m` 选项指定提交信息，该信息用于描述本次提交所做的更改：\n```bash\ngit commit -m \"Initial commit\"\n```\n这里的 `\"Initial commit\"` 是提交信息，你可以根据实际情况修改该信息，使其更准确地描述本次提交的内容。\n\n### 详细提交信息\n如果提交信息比较复杂，可以不使用 `-m` 选项，直接执行 `git commit` 命令。Git 会打开一个文本编辑器（如 Vim 或 Nano），让你输入详细的提交信息。在编辑器中输入提交信息后，保存并退出编辑器，即可完成提交。\n\n### 跳过暂存区直接提交\n如果你只想提交某些文件的修改，并且不想将这些修改先添加到暂存区，可以使用 `-a` 选项：\n```bash\ngit commit -a -m \"Update some files\"\n```\n使用 `-a` 选项时，Git 会自动将所有已跟踪文件的修改添加到暂存区并提交，但不会处理未跟踪的文件。\n\n::: tip\n为提高代码提交信息的可读性、协作效率和版本管理质量，你应该遵循 [commit 的提交规范](提交信息规范.md)\n:::\n\n## 4. 查看提交历史\n### 功能概述\n`git log` 命令用于查看版本库的提交历史，包括每个提交的哈希值、作者、提交时间和提交信息等。\n\n### 基本用法\n执行 `git log` 命令可以查看完整的提交历史：\n```bash\ngit log\n```\n输出结果会按照时间顺序倒序排列，**最新的提交在最上面**。\n\n### 简化输出\n如果提交历史很长，你可能只需要查看一些关键信息，可以使用 `--oneline` 选项简化输出：\n```bash\ngit log --oneline\n```\n该选项会将每个提交的信息压缩到一行，**只显示提交的哈希值和提交信息的前几个字符**。\n\n### 查看指定数量的提交\n使用 `-n` 选项可以指定查看的提交数量，例如查看最近的 3 个提交：\n```bash\ngit log -n 3\n```\n\n通过以上步骤，可以使用 `Git` 完成版本库的创建，从初始化版本库到添加文件、暂存更改、提交版本，并查看提交历史。","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":2,"title":"1. 初始化版本库","slug":"_1-初始化版本库","link":"#_1-初始化版本库","children":[{"level":3,"title":"功能概述","slug":"功能概述","link":"#功能概述","children":[]},{"level":3,"title":"操作步骤","slug":"操作步骤","link":"#操作步骤","children":[]},{"level":3,"title":"查看初始化结果","slug":"查看初始化结果","link":"#查看初始化结果","children":[]}]},{"level":2,"title":"2. 添加文件到暂存区","slug":"_2-添加文件到暂存区","link":"#_2-添加文件到暂存区","children":[{"level":3,"title":"功能概述","slug":"功能概述-1","link":"#功能概述-1","children":[]},{"level":3,"title":"常用用法","slug":"常用用法","link":"#常用用法","children":[]},{"level":3,"title":"查看暂存区状态","slug":"查看暂存区状态","link":"#查看暂存区状态","children":[]}]},{"level":2,"title":"3. 提交暂存区的修改","slug":"_3-提交暂存区的修改","link":"#_3-提交暂存区的修改","children":[{"level":3,"title":"功能概述","slug":"功能概述-2","link":"#功能概述-2","children":[]},{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"详细提交信息","slug":"详细提交信息","link":"#详细提交信息","children":[]},{"level":3,"title":"跳过暂存区直接提交","slug":"跳过暂存区直接提交","link":"#跳过暂存区直接提交","children":[]}]},{"level":2,"title":"4. 查看提交历史","slug":"_4-查看提交历史","link":"#_4-查看提交历史","children":[{"level":3,"title":"功能概述","slug":"功能概述-3","link":"#功能概述-3","children":[]},{"level":3,"title":"基本用法","slug":"基本用法-1","link":"#基本用法-1","children":[]},{"level":3,"title":"简化输出","slug":"简化输出","link":"#简化输出","children":[]},{"level":3,"title":"查看指定数量的提交","slug":"查看指定数量的提交","link":"#查看指定数量的提交","children":[]}]}],"links":[{"raw":"%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.md","relative":"notes/patch/Git/%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.md","absolute":"/notes/patch/Git/%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.md"}]}}
