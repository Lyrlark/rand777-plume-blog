{"content":"<p><a href=\"https://nodejs.cn/api/corepack.html\" target=\"_blank\" rel=\"noopener noreferrer\">corepack</a>是一个nodejs自带的包管理器的管理工具，主要是用来管理诸多的包管理器的。当在多人开发环境中，不同开发者用的包管理器不同、版本不同，这时候就可以\n用到 <code v-pre>corepack</code> 了。\n现在<code v-pre>corepack</code>已经随 <code v-pre>node</code> 一起安装的，就如同npm一样，但如何使用 <code v-pre>corepack</code> 安装 <code v-pre>pnpm</code>，并在之后可以更换包管理器呢？</p>\n<div class=\"language-npm\" data-highlighter=\"shiki\" data-ext=\"npm\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>corepack enable</span></span>\n<span class=\"line\"><span>corepack install --global pnpm@latest</span></span></code></pre>\n</div><p>在 <code v-pre>package.json</code> 中添加 <code v-pre>&quot;packageManager&quot;: &quot;pnpm@8.6.6&quot;</code>，删除 <code v-pre>node_modules</code> 并用 <code v-pre>pnpm</code>\n重新安装依赖。之后如需换为 <code v-pre>npm</code> 则删除 <code v-pre>node_modules</code> ，<code v-pre>pnpm-lock.yml</code> ，<code v-pre>packageManager字段</code>，然后重新用\n<code v-pre>npm</code> 安装依赖即可。</p>\n","env":{"base":"/","filePath":"G:/200-Project/hoey-blog-plume/docs/技文/24091101.md","filePathRelative":"技文/24091101.md","frontmatter":{"title":"corepack管理包管理器","tags":["Node","npm","pnpm"],"createTime":"2024/09/11 22:01:50","permalink":"/article/24091101/"},"sfcBlocks":{"template":{"type":"template","content":"<template><p><a href=\"https://nodejs.cn/api/corepack.html\" target=\"_blank\" rel=\"noopener noreferrer\">corepack</a>是一个nodejs自带的包管理器的管理工具，主要是用来管理诸多的包管理器的。当在多人开发环境中，不同开发者用的包管理器不同、版本不同，这时候就可以\n用到 <code v-pre>corepack</code> 了。\n现在<code v-pre>corepack</code>已经随 <code v-pre>node</code> 一起安装的，就如同npm一样，但如何使用 <code v-pre>corepack</code> 安装 <code v-pre>pnpm</code>，并在之后可以更换包管理器呢？</p>\n<div class=\"language-npm\" data-highlighter=\"shiki\" data-ext=\"npm\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>corepack enable</span></span>\n<span class=\"line\"><span>corepack install --global pnpm@latest</span></span></code></pre>\n</div><p>在 <code v-pre>package.json</code> 中添加 <code v-pre>&quot;packageManager&quot;: &quot;pnpm@8.6.6&quot;</code>，删除 <code v-pre>node_modules</code> 并用 <code v-pre>pnpm</code>\n重新安装依赖。之后如需换为 <code v-pre>npm</code> 则删除 <code v-pre>node_modules</code> ，<code v-pre>pnpm-lock.yml</code> ，<code v-pre>packageManager字段</code>，然后重新用\n<code v-pre>npm</code> 安装依赖即可。</p>\n</template>","contentStripped":"<p><a href=\"https://nodejs.cn/api/corepack.html\" target=\"_blank\" rel=\"noopener noreferrer\">corepack</a>是一个nodejs自带的包管理器的管理工具，主要是用来管理诸多的包管理器的。当在多人开发环境中，不同开发者用的包管理器不同、版本不同，这时候就可以\n用到 <code v-pre>corepack</code> 了。\n现在<code v-pre>corepack</code>已经随 <code v-pre>node</code> 一起安装的，就如同npm一样，但如何使用 <code v-pre>corepack</code> 安装 <code v-pre>pnpm</code>，并在之后可以更换包管理器呢？</p>\n<div class=\"language-npm\" data-highlighter=\"shiki\" data-ext=\"npm\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>corepack enable</span></span>\n<span class=\"line\"><span>corepack install --global pnpm@latest</span></span></code></pre>\n</div><p>在 <code v-pre>package.json</code> 中添加 <code v-pre>&quot;packageManager&quot;: &quot;pnpm@8.6.6&quot;</code>，删除 <code v-pre>node_modules</code> 并用 <code v-pre>pnpm</code>\n重新安装依赖。之后如需换为 <code v-pre>npm</code> 则删除 <code v-pre>node_modules</code> ，<code v-pre>pnpm-lock.yml</code> ，<code v-pre>packageManager字段</code>，然后重新用\n<code v-pre>npm</code> 安装依赖即可。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"[corepack](https://nodejs.cn/api/corepack.html)是一个nodejs自带的包管理器的管理工具，主要是用来管理诸多的包管理器的。当在多人开发环境中，不同开发者用的包管理器不同、版本不同，这时候就可以\n用到 `corepack` 了。\n现在`corepack`已经随 `node` 一起安装的，就如同npm一样，但如何使用 `corepack` 安装 `pnpm`，并在之后可以更换包管理器呢？\n``` npm\ncorepack enable\ncorepack install --global pnpm@latest\n```\n在 `package.json` 中添加 `\"packageManager\": \"pnpm@8.6.6\"`，删除 `node_modules` 并用 `pnpm`\n重新安装依赖。之后如需换为 `npm` 则删除 `node_modules` ，`pnpm-lock.yml` ，`packageManager字段`，然后重新用\n`npm` 安装依赖即可。","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[]}}
