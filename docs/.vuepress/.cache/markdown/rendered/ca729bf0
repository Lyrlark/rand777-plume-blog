{"content":"<p>我们在处理 <code v-pre>Promise</code> 结果时通常会用 <code v-pre>.then()</code> 获取结果，有时为了简化会用 <code v-pre>await</code> ，那么 <code v-pre>await</code> 是什么？为什么 <code v-pre>await</code> 能够简化这个步骤？</p>\n<blockquote>\n<p><strong><code v-pre>await</code> 是基于 <code v-pre>Promise</code> 和生成器函数（Generator）的语法糖</strong>。它简化了异步代码的编写方式，但底层仍然依赖于 <code v-pre>Promise</code> 的机制。</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"_1-await-的本质\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-await-的本质\"><span>1. <code v-pre>await</code> 的本质</span></a></h2>\n<h3 id=\"_1-1-await-是-promise-的语法糖\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-1-await-是-promise-的语法糖\"><span>1.1 <code v-pre>await</code> 是 <code v-pre>Promise</code> 的语法糖</span></a></h3>\n<p>在 <code v-pre>JavaScript</code> 中， <code v-pre>async/await</code> 和 <code v-pre>.then()</code> 是用于处理 异步操作 的两种不同方式。\n它们都基于 <code v-pre>JavaScript</code> 的 <code v-pre>Promise</code> 对象，但提供了不同的语法和使用体验。 <code v-pre>async/await</code> 是 <code v-pre>ES2017（ES8）</code> 引入的 <strong>语法糖</strong>，\n用于简化异步代码的写法，使其看起来更像同步代码。</p>\n<ul>\n<li>\n<p><strong>传统 Promise 链</strong>：</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  })</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">处理结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  })</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">错误:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  });</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>使用 <code v-pre>await</code> 后</strong>：</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  try</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等待 Promise 完成</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">处理结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">错误:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p><strong>对比</strong>：<br>\n<code v-pre>await</code> 将异步代码的写法从<strong>链式调用</strong>转换为<strong>同步风格</strong>，但底层仍然是通过 <code v-pre>Promise</code> 的 <code v-pre>then</code> 方法实现的。</p>\n<hr>\n<h3 id=\"_1-2-async-函数返回-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-2-async-函数返回-promise\"><span>1.2 <code v-pre>async</code> 函数返回 <code v-pre>Promise</code></span></a></h3>\n<ul>\n<li>\n<p>一个 <code v-pre>async</code> 函数会自动返回一个 <code v-pre>Promise</code>，即使你直接返回普通值：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getValue</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 自动包装为 Promise.resolve(42)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getValue</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">().</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 42</span></span></code></pre>\n</div></li>\n<li>\n<p>如果函数内有 <code v-pre>await</code>，函数会暂停执行直到 <code v-pre>Promise</code> 完成：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> asyncFunc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">开始</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  await</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 暂停 1 秒</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">结束</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 1 秒后输出</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<hr>\n<h2 id=\"_2-底层机制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-底层机制\"><span>2. 底层机制</span></a></h2>\n<h3 id=\"_2-1-生成器-generator-与-yield\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-1-生成器-generator-与-yield\"><span>2.1 生成器（Generator）与 <code v-pre>yield</code></span></a></h3>\n<p><code v-pre>async/await</code> 的实现借鉴了生成器（Generator）的 <code v-pre>yield</code> 语法。例如：</p>\n<ul>\n<li>\n<p><strong>生成器函数</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">*</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> gen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> yield</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 暂停执行，等待外部输入</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n<li>\n<p><strong><code v-pre>async/await</code> 的等价转换</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> asyncFunc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等价于生成器的 yield</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<p><strong>区别</strong>：<br>\n生成器需要手动控制迭代器（<code v-pre>next()</code>），而 <code v-pre>async/await</code> 自动处理异步流程。</p>\n<hr>\n<h3 id=\"_2-2-事件循环与非阻塞\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-2-事件循环与非阻塞\"><span>2.2 事件循环与非阻塞</span></a></h3>\n<p>拓展阅读：<RouteLink to=\"/%E5%AD%A6%E6%96%87/23042001.html\">JavaScript 事件循环机制</RouteLink></p>\n<ul>\n<li>\n<p><strong><code v-pre>await</code> 不会阻塞线程</strong>：<br>\n<code v-pre>await</code> 只是让当前 <code v-pre>async</code> 函数暂停执行，但 JavaScript 的事件循环仍然可以处理其他任务（如 I/O、定时器）。</p>\n</li>\n<li>\n<p><strong>底层实现</strong>：<br>\n当遇到 <code v-pre>await</code> 时，JavaScript 引擎会：</p>\n<ol>\n<li>将 <code v-pre>await</code> 后的代码注册到微任务队列。</li>\n<li>释放当前线程，执行其他任务。</li>\n<li>当 <code v-pre>Promise</code> 完成后，将后续代码加入微任务队列。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"_3-与-promise-的关系\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-与-promise-的关系\"><span>3. 与 <code v-pre>Promise</code> 的关系</span></a></h2>\n<h3 id=\"_3-1-await-必须配合-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-1-await-必须配合-promise\"><span>3.1 <code v-pre>await</code> 必须配合 <code v-pre>Promise</code></span></a></h3>\n<ul>\n<li><code v-pre>await</code> 后面的表达式必须是 <code v-pre>Promise</code>（如果不是，会被自动包装为 <code v-pre>Promise</code>）：<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> example</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等价于 await Promise.resolve(42)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 42</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<h3 id=\"_3-2-错误处理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-2-错误处理\"><span>3.2 错误处理</span></a></h3>\n<ul>\n<li><code v-pre>try/catch</code> 实际上捕获的是 <code v-pre>Promise</code> 的拒绝状态：<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  try</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    await</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">reject</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">出错了</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 抛出错误</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 捕获到 \"出错了\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<hr>\n<h2 id=\"_4-为什么说它是语法糖\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-为什么说它是语法糖\"><span>4. 为什么说它是语法糖？</span></a></h2>\n<h3 id=\"_4-1-等价转换示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-1-等价转换示例\"><span>4.1 等价转换示例</span></a></h3>\n<p>以下两段代码是等价的：</p>\n<p><strong>使用 <code v-pre>async/await</code></strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchAndProcess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p><strong>纯 <code v-pre>Promise</code> 实现</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchAndProcess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">      return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><h3 id=\"_4-2-核心优势\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-2-核心优势\"><span>4.2 核心优势</span></a></h3>\n<ul>\n<li><strong>可读性</strong>：避免多层嵌套的 <code v-pre>.then()</code> 链。</li>\n<li><strong>错误处理</strong>：用 <code v-pre>try/catch</code> 统一处理同步和异步错误。</li>\n<li><strong>逻辑直观</strong>：代码执行顺序与书写顺序一致。</li>\n</ul>\n<hr>\n<h2 id=\"_5-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-总结\"><span>5. 总结</span></a></h2>\n<ul>\n<li><strong><code v-pre>await</code> 是 <code v-pre>Promise</code> 的语法糖</strong>：它简化了异步代码的写法，但底层依赖于 <code v-pre>Promise</code> 和微任务队列。</li>\n<li><strong>非阻塞特性</strong>：<code v-pre>await</code> 暂停当前函数，但不会阻塞其他操作。</li>\n<li><strong>适用场景</strong>：需要顺序执行多个异步操作时，或需要同步风格的错误处理。</li>\n</ul>\n","env":{"base":"/","filePath":"D:/zhy-git/hoey-blog-plume/docs/学文/25033101.md","filePathRelative":"学文/25033101.md","frontmatter":{"title":"关于 await","createTime":"2025/03/31 22:59:08","permalink":"/article/g0pubxs5/","tags":["JavaScript"]},"sfcBlocks":{"template":{"type":"template","content":"<template><p>我们在处理 <code v-pre>Promise</code> 结果时通常会用 <code v-pre>.then()</code> 获取结果，有时为了简化会用 <code v-pre>await</code> ，那么 <code v-pre>await</code> 是什么？为什么 <code v-pre>await</code> 能够简化这个步骤？</p>\n<blockquote>\n<p><strong><code v-pre>await</code> 是基于 <code v-pre>Promise</code> 和生成器函数（Generator）的语法糖</strong>。它简化了异步代码的编写方式，但底层仍然依赖于 <code v-pre>Promise</code> 的机制。</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"_1-await-的本质\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-await-的本质\"><span>1. <code v-pre>await</code> 的本质</span></a></h2>\n<h3 id=\"_1-1-await-是-promise-的语法糖\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-1-await-是-promise-的语法糖\"><span>1.1 <code v-pre>await</code> 是 <code v-pre>Promise</code> 的语法糖</span></a></h3>\n<p>在 <code v-pre>JavaScript</code> 中， <code v-pre>async/await</code> 和 <code v-pre>.then()</code> 是用于处理 异步操作 的两种不同方式。\n它们都基于 <code v-pre>JavaScript</code> 的 <code v-pre>Promise</code> 对象，但提供了不同的语法和使用体验。 <code v-pre>async/await</code> 是 <code v-pre>ES2017（ES8）</code> 引入的 <strong>语法糖</strong>，\n用于简化异步代码的写法，使其看起来更像同步代码。</p>\n<ul>\n<li>\n<p><strong>传统 Promise 链</strong>：</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  })</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">处理结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  })</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">错误:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  });</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>使用 <code v-pre>await</code> 后</strong>：</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  try</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等待 Promise 完成</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">处理结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">错误:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p><strong>对比</strong>：<br>\n<code v-pre>await</code> 将异步代码的写法从<strong>链式调用</strong>转换为<strong>同步风格</strong>，但底层仍然是通过 <code v-pre>Promise</code> 的 <code v-pre>then</code> 方法实现的。</p>\n<hr>\n<h3 id=\"_1-2-async-函数返回-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-2-async-函数返回-promise\"><span>1.2 <code v-pre>async</code> 函数返回 <code v-pre>Promise</code></span></a></h3>\n<ul>\n<li>\n<p>一个 <code v-pre>async</code> 函数会自动返回一个 <code v-pre>Promise</code>，即使你直接返回普通值：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getValue</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 自动包装为 Promise.resolve(42)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getValue</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">().</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 42</span></span></code></pre>\n</div></li>\n<li>\n<p>如果函数内有 <code v-pre>await</code>，函数会暂停执行直到 <code v-pre>Promise</code> 完成：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> asyncFunc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">开始</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  await</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 暂停 1 秒</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">结束</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 1 秒后输出</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<hr>\n<h2 id=\"_2-底层机制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-底层机制\"><span>2. 底层机制</span></a></h2>\n<h3 id=\"_2-1-生成器-generator-与-yield\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-1-生成器-generator-与-yield\"><span>2.1 生成器（Generator）与 <code v-pre>yield</code></span></a></h3>\n<p><code v-pre>async/await</code> 的实现借鉴了生成器（Generator）的 <code v-pre>yield</code> 语法。例如：</p>\n<ul>\n<li>\n<p><strong>生成器函数</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">*</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> gen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> yield</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 暂停执行，等待外部输入</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n<li>\n<p><strong><code v-pre>async/await</code> 的等价转换</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> asyncFunc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等价于生成器的 yield</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<p><strong>区别</strong>：<br>\n生成器需要手动控制迭代器（<code v-pre>next()</code>），而 <code v-pre>async/await</code> 自动处理异步流程。</p>\n<hr>\n<h3 id=\"_2-2-事件循环与非阻塞\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-2-事件循环与非阻塞\"><span>2.2 事件循环与非阻塞</span></a></h3>\n<p>拓展阅读：<RouteLink to=\"/%E5%AD%A6%E6%96%87/23042001.html\">JavaScript 事件循环机制</RouteLink></p>\n<ul>\n<li>\n<p><strong><code v-pre>await</code> 不会阻塞线程</strong>：<br>\n<code v-pre>await</code> 只是让当前 <code v-pre>async</code> 函数暂停执行，但 JavaScript 的事件循环仍然可以处理其他任务（如 I/O、定时器）。</p>\n</li>\n<li>\n<p><strong>底层实现</strong>：<br>\n当遇到 <code v-pre>await</code> 时，JavaScript 引擎会：</p>\n<ol>\n<li>将 <code v-pre>await</code> 后的代码注册到微任务队列。</li>\n<li>释放当前线程，执行其他任务。</li>\n<li>当 <code v-pre>Promise</code> 完成后，将后续代码加入微任务队列。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"_3-与-promise-的关系\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-与-promise-的关系\"><span>3. 与 <code v-pre>Promise</code> 的关系</span></a></h2>\n<h3 id=\"_3-1-await-必须配合-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-1-await-必须配合-promise\"><span>3.1 <code v-pre>await</code> 必须配合 <code v-pre>Promise</code></span></a></h3>\n<ul>\n<li><code v-pre>await</code> 后面的表达式必须是 <code v-pre>Promise</code>（如果不是，会被自动包装为 <code v-pre>Promise</code>）：<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> example</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等价于 await Promise.resolve(42)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 42</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<h3 id=\"_3-2-错误处理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-2-错误处理\"><span>3.2 错误处理</span></a></h3>\n<ul>\n<li><code v-pre>try/catch</code> 实际上捕获的是 <code v-pre>Promise</code> 的拒绝状态：<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  try</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    await</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">reject</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">出错了</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 抛出错误</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 捕获到 \"出错了\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<hr>\n<h2 id=\"_4-为什么说它是语法糖\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-为什么说它是语法糖\"><span>4. 为什么说它是语法糖？</span></a></h2>\n<h3 id=\"_4-1-等价转换示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-1-等价转换示例\"><span>4.1 等价转换示例</span></a></h3>\n<p>以下两段代码是等价的：</p>\n<p><strong>使用 <code v-pre>async/await</code></strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchAndProcess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p><strong>纯 <code v-pre>Promise</code> 实现</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchAndProcess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">      return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><h3 id=\"_4-2-核心优势\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-2-核心优势\"><span>4.2 核心优势</span></a></h3>\n<ul>\n<li><strong>可读性</strong>：避免多层嵌套的 <code v-pre>.then()</code> 链。</li>\n<li><strong>错误处理</strong>：用 <code v-pre>try/catch</code> 统一处理同步和异步错误。</li>\n<li><strong>逻辑直观</strong>：代码执行顺序与书写顺序一致。</li>\n</ul>\n<hr>\n<h2 id=\"_5-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-总结\"><span>5. 总结</span></a></h2>\n<ul>\n<li><strong><code v-pre>await</code> 是 <code v-pre>Promise</code> 的语法糖</strong>：它简化了异步代码的写法，但底层依赖于 <code v-pre>Promise</code> 和微任务队列。</li>\n<li><strong>非阻塞特性</strong>：<code v-pre>await</code> 暂停当前函数，但不会阻塞其他操作。</li>\n<li><strong>适用场景</strong>：需要顺序执行多个异步操作时，或需要同步风格的错误处理。</li>\n</ul>\n</template>","contentStripped":"<p>我们在处理 <code v-pre>Promise</code> 结果时通常会用 <code v-pre>.then()</code> 获取结果，有时为了简化会用 <code v-pre>await</code> ，那么 <code v-pre>await</code> 是什么？为什么 <code v-pre>await</code> 能够简化这个步骤？</p>\n<blockquote>\n<p><strong><code v-pre>await</code> 是基于 <code v-pre>Promise</code> 和生成器函数（Generator）的语法糖</strong>。它简化了异步代码的编写方式，但底层仍然依赖于 <code v-pre>Promise</code> 的机制。</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"_1-await-的本质\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-await-的本质\"><span>1. <code v-pre>await</code> 的本质</span></a></h2>\n<h3 id=\"_1-1-await-是-promise-的语法糖\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-1-await-是-promise-的语法糖\"><span>1.1 <code v-pre>await</code> 是 <code v-pre>Promise</code> 的语法糖</span></a></h3>\n<p>在 <code v-pre>JavaScript</code> 中， <code v-pre>async/await</code> 和 <code v-pre>.then()</code> 是用于处理 异步操作 的两种不同方式。\n它们都基于 <code v-pre>JavaScript</code> 的 <code v-pre>Promise</code> 对象，但提供了不同的语法和使用体验。 <code v-pre>async/await</code> 是 <code v-pre>ES2017（ES8）</code> 引入的 <strong>语法糖</strong>，\n用于简化异步代码的写法，使其看起来更像同步代码。</p>\n<ul>\n<li>\n<p><strong>传统 Promise 链</strong>：</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  })</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">处理结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  })</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">错误:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  });</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>使用 <code v-pre>await</code> 后</strong>：</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  try</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等待 Promise 完成</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">数据:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">处理结果:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> result</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">错误:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p><strong>对比</strong>：<br>\n<code v-pre>await</code> 将异步代码的写法从<strong>链式调用</strong>转换为<strong>同步风格</strong>，但底层仍然是通过 <code v-pre>Promise</code> 的 <code v-pre>then</code> 方法实现的。</p>\n<hr>\n<h3 id=\"_1-2-async-函数返回-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-2-async-函数返回-promise\"><span>1.2 <code v-pre>async</code> 函数返回 <code v-pre>Promise</code></span></a></h3>\n<ul>\n<li>\n<p>一个 <code v-pre>async</code> 函数会自动返回一个 <code v-pre>Promise</code>，即使你直接返回普通值：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getValue</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 自动包装为 Promise.resolve(42)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getValue</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">().</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 42</span></span></code></pre>\n</div></li>\n<li>\n<p>如果函数内有 <code v-pre>await</code>，函数会暂停执行直到 <code v-pre>Promise</code> 完成：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> asyncFunc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">开始</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  await</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> new</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> setTimeout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">resolve</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1000</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 暂停 1 秒</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">结束</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 1 秒后输出</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<hr>\n<h2 id=\"_2-底层机制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-底层机制\"><span>2. 底层机制</span></a></h2>\n<h3 id=\"_2-1-生成器-generator-与-yield\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-1-生成器-generator-与-yield\"><span>2.1 生成器（Generator）与 <code v-pre>yield</code></span></a></h3>\n<p><code v-pre>async/await</code> 的实现借鉴了生成器（Generator）的 <code v-pre>yield</code> 语法。例如：</p>\n<ul>\n<li>\n<p><strong>生成器函数</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">*</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> gen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> yield</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 暂停执行，等待外部输入</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n<li>\n<p><strong><code v-pre>async/await</code> 的等价转换</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> asyncFunc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等价于生成器的 yield</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<p><strong>区别</strong>：<br>\n生成器需要手动控制迭代器（<code v-pre>next()</code>），而 <code v-pre>async/await</code> 自动处理异步流程。</p>\n<hr>\n<h3 id=\"_2-2-事件循环与非阻塞\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-2-事件循环与非阻塞\"><span>2.2 事件循环与非阻塞</span></a></h3>\n<p>拓展阅读：<RouteLink to=\"/%E5%AD%A6%E6%96%87/23042001.html\">JavaScript 事件循环机制</RouteLink></p>\n<ul>\n<li>\n<p><strong><code v-pre>await</code> 不会阻塞线程</strong>：<br>\n<code v-pre>await</code> 只是让当前 <code v-pre>async</code> 函数暂停执行，但 JavaScript 的事件循环仍然可以处理其他任务（如 I/O、定时器）。</p>\n</li>\n<li>\n<p><strong>底层实现</strong>：<br>\n当遇到 <code v-pre>await</code> 时，JavaScript 引擎会：</p>\n<ol>\n<li>将 <code v-pre>await</code> 后的代码注册到微任务队列。</li>\n<li>释放当前线程，执行其他任务。</li>\n<li>当 <code v-pre>Promise</code> 完成后，将后续代码加入微任务队列。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"_3-与-promise-的关系\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-与-promise-的关系\"><span>3. 与 <code v-pre>Promise</code> 的关系</span></a></h2>\n<h3 id=\"_3-1-await-必须配合-promise\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-1-await-必须配合-promise\"><span>3.1 <code v-pre>await</code> 必须配合 <code v-pre>Promise</code></span></a></h3>\n<ul>\n<li><code v-pre>await</code> 后面的表达式必须是 <code v-pre>Promise</code>（如果不是，会被自动包装为 <code v-pre>Promise</code>）：<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> example</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 42</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 等价于 await Promise.resolve(42)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出 42</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<h3 id=\"_3-2-错误处理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-2-错误处理\"><span>3.2 错误处理</span></a></h3>\n<ul>\n<li><code v-pre>try/catch</code> 实际上捕获的是 <code v-pre>Promise</code> 的拒绝状态：<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> handleData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  try</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    await</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> Promise</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">reject</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">出错了</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 抛出错误</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> catch</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">error</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 捕获到 \"出错了\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div></li>\n</ul>\n<hr>\n<h2 id=\"_4-为什么说它是语法糖\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-为什么说它是语法糖\"><span>4. 为什么说它是语法糖？</span></a></h2>\n<h3 id=\"_4-1-等价转换示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-1-等价转换示例\"><span>4.1 等价转换示例</span></a></h3>\n<p>以下两段代码是等价的：</p>\n<p><strong>使用 <code v-pre>async/await</code></strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">async</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchAndProcess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> await</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p><strong>纯 <code v-pre>Promise</code> 实现</strong>：</p>\n<div class=\"language-javascript\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchAndProcess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> fetchData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    .</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">then</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">      return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> processData</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">data</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><h3 id=\"_4-2-核心优势\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-2-核心优势\"><span>4.2 核心优势</span></a></h3>\n<ul>\n<li><strong>可读性</strong>：避免多层嵌套的 <code v-pre>.then()</code> 链。</li>\n<li><strong>错误处理</strong>：用 <code v-pre>try/catch</code> 统一处理同步和异步错误。</li>\n<li><strong>逻辑直观</strong>：代码执行顺序与书写顺序一致。</li>\n</ul>\n<hr>\n<h2 id=\"_5-总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-总结\"><span>5. 总结</span></a></h2>\n<ul>\n<li><strong><code v-pre>await</code> 是 <code v-pre>Promise</code> 的语法糖</strong>：它简化了异步代码的写法，但底层依赖于 <code v-pre>Promise</code> 和微任务队列。</li>\n<li><strong>非阻塞特性</strong>：<code v-pre>await</code> 暂停当前函数，但不会阻塞其他操作。</li>\n<li><strong>适用场景</strong>：需要顺序执行多个异步操作时，或需要同步风格的错误处理。</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"我们在处理 `Promise` 结果时通常会用 `.then()` 获取结果，有时为了简化会用 `await` ，那么 `await` 是什么？为什么 `await` 能够简化这个步骤？\r\n\r\n> **`await` 是基于 `Promise` 和生成器函数（Generator）的语法糖**。它简化了异步代码的编写方式，但底层仍然依赖于 `Promise` 的机制。\r\n\r\n<!-- more -->\r\n\r\n## 1. `await` 的本质\r\n\r\n### 1.1 `await` 是 `Promise` 的语法糖\r\n\r\n在 `JavaScript` 中， `async/await` 和 `.then()` 是用于处理 异步操作 的两种不同方式。\r\n它们都基于 `JavaScript` 的 `Promise` 对象，但提供了不同的语法和使用体验。 `async/await` 是 `ES2017（ES8）` 引入的 **语法糖**，\r\n用于简化异步代码的写法，使其看起来更像同步代码。\r\n\r\n- **传统 Promise 链**：\r\n  ```javascript\r\n  fetchData()\r\n    .then(data => {\r\n      console.log(\"数据:\", data);\r\n      return processData(data);\r\n    })\r\n    .then(result => {\r\n      console.log(\"处理结果:\", result);\r\n    })\r\n    .catch(error => {\r\n      console.error(\"错误:\", error);\r\n    });\r\n  ```\r\n\r\n- **使用 `await` 后**：\r\n  ```javascript\r\n  async function handleData() {\r\n    try {\r\n      const data = await fetchData(); // 等待 Promise 完成\r\n      console.log(\"数据:\", data);\r\n      const result = await processData(data);\r\n      console.log(\"处理结果:\", result);\r\n    } catch (error) {\r\n      console.error(\"错误:\", error);\r\n    }\r\n  }\r\n  ```\r\n\r\n**对比**：  \r\n`await` 将异步代码的写法从**链式调用**转换为**同步风格**，但底层仍然是通过 `Promise` 的 `then` 方法实现的。\r\n\r\n---\r\n\r\n### 1.2 `async` 函数返回 `Promise`\r\n- 一个 `async` 函数会自动返回一个 `Promise`，即使你直接返回普通值：\r\n  ```javascript\r\n  async function getValue() {\r\n    return 42; // 自动包装为 Promise.resolve(42)\r\n  }\r\n\r\n  getValue().then(value => console.log(value)); // 输出 42\r\n  ```\r\n\r\n- 如果函数内有 `await`，函数会暂停执行直到 `Promise` 完成：\r\n  ```javascript\r\n  async function asyncFunc() {\r\n    console.log(\"开始\");\r\n    await new Promise(resolve => setTimeout(resolve, 1000)); // 暂停 1 秒\r\n    console.log(\"结束\"); // 1 秒后输出\r\n  }\r\n  ```\r\n\r\n---\r\n\r\n## 2. 底层机制\r\n### 2.1 生成器（Generator）与 `yield`\r\n`async/await` 的实现借鉴了生成器（Generator）的 `yield` 语法。例如：\r\n- **生成器函数**：\r\n  ```javascript\r\n  function* gen() {\r\n    const data = yield fetchData(); // 暂停执行，等待外部输入\r\n    console.log(data);\r\n  }\r\n  ```\r\n\r\n- **`async/await` 的等价转换**：\r\n  ```javascript\r\n  async function asyncFunc() {\r\n    const data = await fetchData(); // 等价于生成器的 yield\r\n    console.log(data);\r\n  }\r\n  ```\r\n\r\n**区别**：  \r\n生成器需要手动控制迭代器（`next()`），而 `async/await` 自动处理异步流程。\r\n\r\n---\r\n\r\n### 2.2 事件循环与非阻塞\r\n\r\n拓展阅读：[JavaScript 事件循环机制](23042001.md)\r\n\r\n- **`await` 不会阻塞线程**：  \r\n  `await` 只是让当前 `async` 函数暂停执行，但 JavaScript 的事件循环仍然可以处理其他任务（如 I/O、定时器）。\r\n\r\n- **底层实现**：  \r\n  当遇到 `await` 时，JavaScript 引擎会：\r\n    1. 将 `await` 后的代码注册到微任务队列。\r\n    2. 释放当前线程，执行其他任务。\r\n    3. 当 `Promise` 完成后，将后续代码加入微任务队列。\r\n\r\n---\r\n\r\n## 3. 与 `Promise` 的关系\r\n### 3.1 `await` 必须配合 `Promise`\r\n- `await` 后面的表达式必须是 `Promise`（如果不是，会被自动包装为 `Promise`）：\r\n  ```javascript\r\n  async function example() {\r\n    const value = await 42; // 等价于 await Promise.resolve(42)\r\n    console.log(value); // 输出 42\r\n  }\r\n  ```\r\n\r\n### 3.2 错误处理\r\n- `try/catch` 实际上捕获的是 `Promise` 的拒绝状态：\r\n  ```javascript\r\n  async function handleData() {\r\n    try {\r\n      await Promise.reject(\"出错了\"); // 抛出错误\r\n    } catch (error) {\r\n      console.error(error); // 捕获到 \"出错了\"\r\n    }\r\n  }\r\n  ```\r\n\r\n---\r\n\r\n## 4. 为什么说它是语法糖？\r\n### 4.1 等价转换示例\r\n以下两段代码是等价的：\r\n\r\n**使用 `async/await`**：\r\n```javascript\r\nasync function fetchAndProcess() {\r\n  const data = await fetchData();\r\n  return processData(data);\r\n}\r\n```\r\n\r\n**纯 `Promise` 实现**：\r\n```javascript\r\nfunction fetchAndProcess() {\r\n  return fetchData()\r\n    .then(data => {\r\n      return processData(data);\r\n    });\r\n}\r\n```\r\n\r\n### 4.2 核心优势\r\n- **可读性**：避免多层嵌套的 `.then()` 链。\r\n- **错误处理**：用 `try/catch` 统一处理同步和异步错误。\r\n- **逻辑直观**：代码执行顺序与书写顺序一致。\r\n\r\n---\r\n\r\n## 5. 总结\r\n- **`await` 是 `Promise` 的语法糖**：它简化了异步代码的写法，但底层依赖于 `Promise` 和微任务队列。\r\n- **非阻塞特性**：`await` 暂停当前函数，但不会阻塞其他操作。\r\n- **适用场景**：需要顺序执行多个异步操作时，或需要同步风格的错误处理。","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":2,"title":"1. await 的本质","slug":"_1-await-的本质","link":"#_1-await-的本质","children":[{"level":3,"title":"1.1 await 是 Promise 的语法糖","slug":"_1-1-await-是-promise-的语法糖","link":"#_1-1-await-是-promise-的语法糖","children":[]},{"level":3,"title":"1.2 async 函数返回 Promise","slug":"_1-2-async-函数返回-promise","link":"#_1-2-async-函数返回-promise","children":[]}]},{"level":2,"title":"2. 底层机制","slug":"_2-底层机制","link":"#_2-底层机制","children":[{"level":3,"title":"2.1 生成器（Generator）与 yield","slug":"_2-1-生成器-generator-与-yield","link":"#_2-1-生成器-generator-与-yield","children":[]},{"level":3,"title":"2.2 事件循环与非阻塞","slug":"_2-2-事件循环与非阻塞","link":"#_2-2-事件循环与非阻塞","children":[]}]},{"level":2,"title":"3. 与 Promise 的关系","slug":"_3-与-promise-的关系","link":"#_3-与-promise-的关系","children":[{"level":3,"title":"3.1 await 必须配合 Promise","slug":"_3-1-await-必须配合-promise","link":"#_3-1-await-必须配合-promise","children":[]},{"level":3,"title":"3.2 错误处理","slug":"_3-2-错误处理","link":"#_3-2-错误处理","children":[]}]},{"level":2,"title":"4. 为什么说它是语法糖？","slug":"_4-为什么说它是语法糖","link":"#_4-为什么说它是语法糖","children":[{"level":3,"title":"4.1 等价转换示例","slug":"_4-1-等价转换示例","link":"#_4-1-等价转换示例","children":[]},{"level":3,"title":"4.2 核心优势","slug":"_4-2-核心优势","link":"#_4-2-核心优势","children":[]}]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]}],"links":[{"raw":"23042001.md","relative":"%E5%AD%A6%E6%96%87/23042001.md","absolute":"/%E5%AD%A6%E6%96%87/23042001.md"}]}}
