{"content":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>变量声明的方式与它们的区别？</p>\n</div>\n<hr>\n<p>在 JavaScript 中，有多种变量声明方式，主要包括使用 <code v-pre>var</code>、<code v-pre>let</code>、<code v-pre>const</code> 关键字，下面详细介绍它们及其区别。</p>\n<h3 id=\"_1-var\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-var\"><span>1. <code v-pre>var</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>函数作用域</strong>：<code v-pre>var</code> 声明的变量具有函数作用域，意味着在函数内部任何位置声明的 <code v-pre>var</code> 变量，在整个函数内部都是可见的。</li>\n<li><strong>变量提升</strong>：使用 <code v-pre>var</code> 声明的变量会被提升到当前作用域的顶部，可以在声明之前访问，但值为 <code v-pre>undefined</code>。</li>\n<li><strong>可重复声明</strong>：在同一作用域内可以多次使用 <code v-pre>var</code> 声明同一个变量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testVar</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: undefined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    var</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    var</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 可以重复声明</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 20</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testVar</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-let\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-let\"><span>2. <code v-pre>let</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>块级作用域</strong>：<code v-pre>let</code> 声明的变量具有块级作用域，变量只在声明它的块（如 <code v-pre>if</code> 语句、<code v-pre>for</code> 循环、<code v-pre>while</code> 循环等）内部可见。</li>\n<li><strong>不存在变量提升</strong>：<code v-pre>let</code> 声明的变量不会被提升到当前作用域的顶部，在声明之前访问会导致 <code v-pre>ReferenceError</code>。</li>\n<li><strong>不可重复声明</strong>：在同一作用域内不能使用 <code v-pre>let</code> 重复声明同一个变量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testLet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // console.log(count); // 报错: ReferenceError: Cannot access 'count' before initialization</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    let</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> count</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">count</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // let count = 20; // 报错: SyntaxError: Identifier 'count' has already been declared</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        let</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> innerCount</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">innerCount</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 20</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // console.log(innerCount); // 报错: ReferenceError: innerCount is not defined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testLet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_3-const\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-const\"><span>3. <code v-pre>const</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>块级作用域</strong>：和 <code v-pre>let</code> 一样，<code v-pre>const</code> 声明的常量具有块级作用域。</li>\n<li><strong>不存在变量提升</strong>：<code v-pre>const</code> 声明的常量不会被提升到当前作用域的顶部，在声明之前访问会导致 <code v-pre>ReferenceError</code>。</li>\n<li><strong>必须初始化</strong>：使用 <code v-pre>const</code> 声明常量时，必须同时进行初始化，否则会报错。</li>\n<li><strong>常量值不可变（基本类型）</strong>：一旦声明并初始化，基本类型的常量的值就不能再被重新赋值，但如果常量是引用类型（如对象、数组），可以修改其内部属性。</li>\n<li><strong>不可重复声明</strong>：在同一作用域内不能使用 <code v-pre>const</code> 重复声明同一个常量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testConst</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // const PI; // 报错: SyntaxError: Missing initializer in const declaration</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> PI</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 3.14</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // PI = 3.14159; // 报错: TypeError: Assignment to constant variable.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">PI</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 3.14</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Bob</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 可以修改对象的属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Bob</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testConst</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>声明方式</th>\n<th>作用域</th>\n<th>提升情况</th>\n<th>可重复声明</th>\n<th>初始化要求</th>\n<th>值可变性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>var</code></td>\n<td>函数作用域</td>\n<td>变量提升</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code v-pre>let</code></td>\n<td>块级作用域</td>\n<td>无提升</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code v-pre>const</code></td>\n<td>块级作用域</td>\n<td>无提升</td>\n<td>否</td>\n<td>是</td>\n<td>基本类型不可变，引用类型可修改内部属性</td>\n</tr>\n</tbody>\n</table>\n<p>在实际开发中，建议优先使用 <code v-pre>const</code> 声明常量，当需要重新赋值时使用 <code v-pre>let</code>，尽量避免使用 <code v-pre>var</code> 以减少潜在的问题。</p>\n","env":{"base":"/","filePath":"G:/200-Project/hoey-blog-plume/docs/notes/interview/JavaScript/变量声明.md","filePathRelative":"notes/interview/JavaScript/变量声明.md","frontmatter":{"title":"变量声明","createTime":"2025/02/03 20:40:59","permalink":"/interview/ukyhjw8j/"},"sfcBlocks":{"template":{"type":"template","content":"<template><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>变量声明的方式与它们的区别？</p>\n</div>\n<hr>\n<p>在 JavaScript 中，有多种变量声明方式，主要包括使用 <code v-pre>var</code>、<code v-pre>let</code>、<code v-pre>const</code> 关键字，下面详细介绍它们及其区别。</p>\n<h3 id=\"_1-var\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-var\"><span>1. <code v-pre>var</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>函数作用域</strong>：<code v-pre>var</code> 声明的变量具有函数作用域，意味着在函数内部任何位置声明的 <code v-pre>var</code> 变量，在整个函数内部都是可见的。</li>\n<li><strong>变量提升</strong>：使用 <code v-pre>var</code> 声明的变量会被提升到当前作用域的顶部，可以在声明之前访问，但值为 <code v-pre>undefined</code>。</li>\n<li><strong>可重复声明</strong>：在同一作用域内可以多次使用 <code v-pre>var</code> 声明同一个变量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testVar</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: undefined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    var</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    var</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 可以重复声明</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 20</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testVar</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-let\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-let\"><span>2. <code v-pre>let</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>块级作用域</strong>：<code v-pre>let</code> 声明的变量具有块级作用域，变量只在声明它的块（如 <code v-pre>if</code> 语句、<code v-pre>for</code> 循环、<code v-pre>while</code> 循环等）内部可见。</li>\n<li><strong>不存在变量提升</strong>：<code v-pre>let</code> 声明的变量不会被提升到当前作用域的顶部，在声明之前访问会导致 <code v-pre>ReferenceError</code>。</li>\n<li><strong>不可重复声明</strong>：在同一作用域内不能使用 <code v-pre>let</code> 重复声明同一个变量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testLet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // console.log(count); // 报错: ReferenceError: Cannot access 'count' before initialization</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    let</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> count</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">count</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // let count = 20; // 报错: SyntaxError: Identifier 'count' has already been declared</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        let</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> innerCount</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">innerCount</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 20</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // console.log(innerCount); // 报错: ReferenceError: innerCount is not defined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testLet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_3-const\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-const\"><span>3. <code v-pre>const</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>块级作用域</strong>：和 <code v-pre>let</code> 一样，<code v-pre>const</code> 声明的常量具有块级作用域。</li>\n<li><strong>不存在变量提升</strong>：<code v-pre>const</code> 声明的常量不会被提升到当前作用域的顶部，在声明之前访问会导致 <code v-pre>ReferenceError</code>。</li>\n<li><strong>必须初始化</strong>：使用 <code v-pre>const</code> 声明常量时，必须同时进行初始化，否则会报错。</li>\n<li><strong>常量值不可变（基本类型）</strong>：一旦声明并初始化，基本类型的常量的值就不能再被重新赋值，但如果常量是引用类型（如对象、数组），可以修改其内部属性。</li>\n<li><strong>不可重复声明</strong>：在同一作用域内不能使用 <code v-pre>const</code> 重复声明同一个常量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testConst</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // const PI; // 报错: SyntaxError: Missing initializer in const declaration</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> PI</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 3.14</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // PI = 3.14159; // 报错: TypeError: Assignment to constant variable.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">PI</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 3.14</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Bob</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 可以修改对象的属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Bob</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testConst</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>声明方式</th>\n<th>作用域</th>\n<th>提升情况</th>\n<th>可重复声明</th>\n<th>初始化要求</th>\n<th>值可变性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>var</code></td>\n<td>函数作用域</td>\n<td>变量提升</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code v-pre>let</code></td>\n<td>块级作用域</td>\n<td>无提升</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code v-pre>const</code></td>\n<td>块级作用域</td>\n<td>无提升</td>\n<td>否</td>\n<td>是</td>\n<td>基本类型不可变，引用类型可修改内部属性</td>\n</tr>\n</tbody>\n</table>\n<p>在实际开发中，建议优先使用 <code v-pre>const</code> 声明常量，当需要重新赋值时使用 <code v-pre>let</code>，尽量避免使用 <code v-pre>var</code> 以减少潜在的问题。</p>\n</template>","contentStripped":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">问题</p>\n<p>变量声明的方式与它们的区别？</p>\n</div>\n<hr>\n<p>在 JavaScript 中，有多种变量声明方式，主要包括使用 <code v-pre>var</code>、<code v-pre>let</code>、<code v-pre>const</code> 关键字，下面详细介绍它们及其区别。</p>\n<h3 id=\"_1-var\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-var\"><span>1. <code v-pre>var</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>函数作用域</strong>：<code v-pre>var</code> 声明的变量具有函数作用域，意味着在函数内部任何位置声明的 <code v-pre>var</code> 变量，在整个函数内部都是可见的。</li>\n<li><strong>变量提升</strong>：使用 <code v-pre>var</code> 声明的变量会被提升到当前作用域的顶部，可以在声明之前访问，但值为 <code v-pre>undefined</code>。</li>\n<li><strong>可重复声明</strong>：在同一作用域内可以多次使用 <code v-pre>var</code> 声明同一个变量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testVar</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: undefined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    var</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    var</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 可以重复声明</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">num</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 20</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testVar</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-let\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-let\"><span>2. <code v-pre>let</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>块级作用域</strong>：<code v-pre>let</code> 声明的变量具有块级作用域，变量只在声明它的块（如 <code v-pre>if</code> 语句、<code v-pre>for</code> 循环、<code v-pre>while</code> 循环等）内部可见。</li>\n<li><strong>不存在变量提升</strong>：<code v-pre>let</code> 声明的变量不会被提升到当前作用域的顶部，在声明之前访问会导致 <code v-pre>ReferenceError</code>。</li>\n<li><strong>不可重复声明</strong>：在同一作用域内不能使用 <code v-pre>let</code> 重复声明同一个变量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testLet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // console.log(count); // 报错: ReferenceError: Cannot access 'count' before initialization</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    let</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> count</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">count</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // let count = 20; // 报错: SyntaxError: Identifier 'count' has already been declared</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        let</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> innerCount</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">innerCount</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 20</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // console.log(innerCount); // 报错: ReferenceError: innerCount is not defined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testLet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_3-const\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-const\"><span>3. <code v-pre>const</code></span></a></h3>\n<ul>\n<li><strong>特点</strong>\n<ul>\n<li><strong>块级作用域</strong>：和 <code v-pre>let</code> 一样，<code v-pre>const</code> 声明的常量具有块级作用域。</li>\n<li><strong>不存在变量提升</strong>：<code v-pre>const</code> 声明的常量不会被提升到当前作用域的顶部，在声明之前访问会导致 <code v-pre>ReferenceError</code>。</li>\n<li><strong>必须初始化</strong>：使用 <code v-pre>const</code> 声明常量时，必须同时进行初始化，否则会报错。</li>\n<li><strong>常量值不可变（基本类型）</strong>：一旦声明并初始化，基本类型的常量的值就不能再被重新赋值，但如果常量是引用类型（如对象、数组），可以修改其内部属性。</li>\n<li><strong>不可重复声明</strong>：在同一作用域内不能使用 <code v-pre>const</code> 重复声明同一个常量。</li>\n</ul>\n</li>\n<li><strong>示例代码</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"javascript\" data-title=\"javascript\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">function</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> testConst</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // const PI; // 报错: SyntaxError: Missing initializer in const declaration</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> PI</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 3.14</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // PI = 3.14159; // 报错: TypeError: Assignment to constant variable.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">PI</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: 3.14</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    const</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Alice</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> '</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Bob</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 可以修改对象的属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    console</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">log</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">person</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> // 输出: Bob</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">testConst</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>声明方式</th>\n<th>作用域</th>\n<th>提升情况</th>\n<th>可重复声明</th>\n<th>初始化要求</th>\n<th>值可变性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>var</code></td>\n<td>函数作用域</td>\n<td>变量提升</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code v-pre>let</code></td>\n<td>块级作用域</td>\n<td>无提升</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code v-pre>const</code></td>\n<td>块级作用域</td>\n<td>无提升</td>\n<td>否</td>\n<td>是</td>\n<td>基本类型不可变，引用类型可修改内部属性</td>\n</tr>\n</tbody>\n</table>\n<p>在实际开发中，建议优先使用 <code v-pre>const</code> 声明常量，当需要重新赋值时使用 <code v-pre>let</code>，尽量避免使用 <code v-pre>var</code> 以减少潜在的问题。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"::: tip 问题\r\n变量声明的方式与它们的区别？\r\n:::\r\n\r\n---\r\n\r\n在 JavaScript 中，有多种变量声明方式，主要包括使用 `var`、`let`、`const` 关键字，下面详细介绍它们及其区别。\r\n\r\n### 1. `var`\r\n- **特点**\r\n    - **函数作用域**：`var` 声明的变量具有函数作用域，意味着在函数内部任何位置声明的 `var` 变量，在整个函数内部都是可见的。\r\n    - **变量提升**：使用 `var` 声明的变量会被提升到当前作用域的顶部，可以在声明之前访问，但值为 `undefined`。\r\n    - **可重复声明**：在同一作用域内可以多次使用 `var` 声明同一个变量。\r\n- **示例代码**\r\n```javascript\r\nfunction testVar() {\r\n    console.log(num); // 输出: undefined\r\n    var num = 10;\r\n    console.log(num); // 输出: 10\r\n    var num = 20; // 可以重复声明\r\n    console.log(num); // 输出: 20\r\n}\r\ntestVar();\r\n```\r\n\r\n### 2. `let`\r\n- **特点**\r\n    - **块级作用域**：`let` 声明的变量具有块级作用域，变量只在声明它的块（如 `if` 语句、`for` 循环、`while` 循环等）内部可见。\r\n    - **不存在变量提升**：`let` 声明的变量不会被提升到当前作用域的顶部，在声明之前访问会导致 `ReferenceError`。\r\n    - **不可重复声明**：在同一作用域内不能使用 `let` 重复声明同一个变量。\r\n- **示例代码**\r\n```javascript\r\nfunction testLet() {\r\n    // console.log(count); // 报错: ReferenceError: Cannot access 'count' before initialization\r\n    let count = 10;\r\n    console.log(count); // 输出: 10\r\n    // let count = 20; // 报错: SyntaxError: Identifier 'count' has already been declared\r\n    if (true) {\r\n        let innerCount = 20;\r\n        console.log(innerCount); // 输出: 20\r\n    }\r\n    // console.log(innerCount); // 报错: ReferenceError: innerCount is not defined\r\n}\r\ntestLet();\r\n```\r\n\r\n### 3. `const`\r\n- **特点**\r\n    - **块级作用域**：和 `let` 一样，`const` 声明的常量具有块级作用域。\r\n    - **不存在变量提升**：`const` 声明的常量不会被提升到当前作用域的顶部，在声明之前访问会导致 `ReferenceError`。\r\n    - **必须初始化**：使用 `const` 声明常量时，必须同时进行初始化，否则会报错。\r\n    - **常量值不可变（基本类型）**：一旦声明并初始化，基本类型的常量的值就不能再被重新赋值，但如果常量是引用类型（如对象、数组），可以修改其内部属性。\r\n    - **不可重复声明**：在同一作用域内不能使用 `const` 重复声明同一个常量。\r\n- **示例代码**\r\n```javascript\r\nfunction testConst() {\r\n    // const PI; // 报错: SyntaxError: Missing initializer in const declaration\r\n    const PI = 3.14;\r\n    // PI = 3.14159; // 报错: TypeError: Assignment to constant variable.\r\n    console.log(PI); // 输出: 3.14\r\n\r\n    const person = { name: 'Alice' };\r\n    person.name = 'Bob'; // 可以修改对象的属性\r\n    console.log(person.name); // 输出: Bob\r\n}\r\ntestConst();\r\n```\r\n\r\n### 总结\r\n| 声明方式 | 作用域 | 提升情况 | 可重复声明 | 初始化要求 | 值可变性 |\r\n| ---- | ---- | ---- | ---- | ---- | ---- |\r\n| `var` | 函数作用域 | 变量提升 | 是 | 否 | 是 |\r\n| `let` | 块级作用域 | 无提升 | 否 | 否 | 是 |\r\n| `const` | 块级作用域 | 无提升 | 否 | 是 | 基本类型不可变，引用类型可修改内部属性 |\r\n\r\n\r\n在实际开发中，建议优先使用 `const` 声明常量，当需要重新赋值时使用 `let`，尽量避免使用 `var` 以减少潜在的问题。","excerpt":"","includedFiles":[],"tasklists":0,"title":"","headers":[{"level":3,"title":"1. var","slug":"_1-var","link":"#_1-var","children":[]},{"level":3,"title":"2. let","slug":"_2-let","link":"#_2-let","children":[]},{"level":3,"title":"3. const","slug":"_3-const","link":"#_3-const","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}}
